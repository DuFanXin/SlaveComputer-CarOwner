///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        24/Jul/2017  11:34:34 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\ /
//                          Projects\zstack\Samples\SampleApp\Source\SampleAp /
//                          p.c                                               /
//    Command line       =  -f "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹ /
//                          âÃô\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ   /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹ /
//                          âÃô\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wConfig.cfg"              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00400000         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Documents and          /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\Source\SampleApp.c" -D ZTOOL_P1  /
//                          -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D    /
//                          xLCD_SUPPORTED=DEBUG -lC "C:\Documents and        /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\CoordinatorEB\List\"    /
//                          -lA "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ /
//                          ¹âÃô\Projects\zstack\Samples\SampleApp\CC2530DB\C /
//                          oordinatorEB\List\" --diag_suppress Pe001,Pa010   /
//                          -o "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹ /
//                          âÃô\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinatorEB\Obj\" -e --no_code_motion --debug     /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Documents and         /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\" -I "C:\Documents and  /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\Source\" -I          /
//                          "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\ZMain\TI2530DB\" -I "C:\Documents and         /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\include\" -I "C:\Documents and             /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\target\CC2530EB\" -I "C:\Documents and     /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\mac\include\" -I "C:\Documents and             /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\mac\high_level\" -I "C:\Documents and          /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\mac\low_level\srf04\" -I "C:\Documents and     /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\mac\low_level\srf04\single_chip\" -I           /
//                          "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\mt\" -I "C:\Documents and    /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\osal\include\" -I "C:\Documents and            /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\services\saddr\" -I "C:\Documents and          /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\services\sdata\" -I "C:\Documents and          /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\af\" -I "C:\Documents and                /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\" -I "C:\Documents and               /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sapi\" -I "C:\Documents and              /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sec\" -I "C:\Documents and               /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sys\" -I "C:\Documents and               /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\zdo\" -I "C:\Documents and               /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\zmac\" -I "C:\Documents and                    /
//                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\zmac\f8w\" -Ohz --require_prototypes           /
//    List file          =  C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\ /
//                          Projects\zstack\Samples\SampleApp\CC2530DB\Coordi /
//                          natorEB\List\SampleApp.s51                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?L_XOR_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??JieQu?relay
        FUNCTION ??JieQu?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBLIC ??SendKongkouInfor?relay
        FUNCTION ??SendKongkouInfor?relay,0203H
        PUBLIC JieQu
        FUNCTION JieQu,0203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P2DIR
        PUBWEAK P2SEL
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 38, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC SendKongkouInfor
        FUNCTION SendKongkouInfor,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC T
        PUBWEAK _A_P2
        PUBWEAK __Constant_0
        PUBWEAK __Constant_10000
        PUBWEAK __Constant_1021
        PUBWEAK __Constant_11021
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_64
        PUBWEAK __Constant_a
        PUBLIC e
        PUBLIC f
        PUBLIC jiaoyan
        PUBLIC r
        PUBLIC `s`
        PUBLIC subch
        PUBLIC w
        PUBLIC z
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
MT_UartInit         SYMBOL "MT_UartInit"
osal_set_event      SYMBOL "osal_set_event"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_rand           SYMBOL "osal_rand"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalLedSet           SYMBOL "HalLedSet"
HalLedBlink         SYMBOL "HalLedBlink"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
JieQu               SYMBOL "JieQu"
??JieQu?relay       SYMBOL "?relay", JieQu
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage
SendKongkouInfor    SYMBOL "SendKongkouInfor"
??SendKongkouInfor?relay SYMBOL "?relay", SendKongkouInfor

        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 
//   75 #include "MT_UART.h"  // ´®¿Ú
//   76 #include "MT.h"
//   77 
//   78 /*********************************************************************
//   79  * MACROS
//   80  */
//   81 
//   82 /*********************************************************************
//   83  * CONSTANTS
//   84  */
//   85 
//   86 /*********************************************************************
//   87  * TYPEDEFS
//   88  */
//   89 
//   90 /*********************************************************************
//   91  * GLOBAL VARIABLES
//   92  */
//   93 
//   94 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   95 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 0
//   96 {
//   97   SAMPLEAPP_PERIODIC_CLUSTERID,
//   98   SAMPLEAPP_FLASH_CLUSTERID
//   99 };
//  100 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  101 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 3
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 3
        DATA16
        DW SampleApp_ClusterList
//  102 {
//  103   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  104   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  105   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  106   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  107   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  108   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  109   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  110   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  111   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  112 };
//  113 
//  114 // This is the Endpoint/Interface description.  It is defined here, but
//  115 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  116 // in the structure here and make it a "const" (in code space).  The
//  117 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  118 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  119 
//  120 /*********************************************************************
//  121  * EXTERNAL VARIABLES
//  122  */
//  123 
//  124 /*********************************************************************
//  125  * EXTERNAL FUNCTIONS
//  126  */
//  127 
//  128 /*********************************************************************
//  129  * LOCAL VARIABLES
//  130  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  132                           // This variable will be received when
//  133                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  135 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  137 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 afAddrType_t SampleApp_Periodic_DstAddr;
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  139 afAddrType_t SampleApp_Flash_DstAddr;
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  140 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 uint8 subch;
subch:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  146 unsigned long jiaoyan;
jiaoyan:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 unsigned char T[13]; 	//ÎÂ¶È+ÌáÊ¾·û	
T:
        DS 13
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 bool f=0;//»ð¾¯ÅÐ¶Ï
f:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  149 bool s=0;//ºô½Ð×´Ì¬
`s`:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 bool e=0;//»ð¾¯ÉÁË¸
e:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  151 bool r=0;//ºô½ÐÉÁË¸
r:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  152 bool z=0;//µÈ´ý×´Ì¬
z:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 uint8 w[1]={0};//³µÎ»×´Ì¬
w:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  154 
//  155 
//  156 /*********************************************************************
//  157  * LOCAL FUNCTIONS
//  158  */
//  159 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  160 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  161 void SampleApp_SendPeriodicMessage( void );
//  162 void SampleApp_SendFlashMessage( uint16 flashTime );
//  163 
//  164 /*********************************************************************
//  165  * NETWORK LAYER CALLBACKS
//  166  */
//  167 
//  168 /*********************************************************************
//  169  * PUBLIC FUNCTIONS
//  170  */
//  171 
//  172 /*********************************************************************
//  173  * @fn      SampleApp_Init
//  174  *
//  175  * @brief   Initialization function for the Generic App Task.
//  176  *          This is called during initialization and should contain
//  177  *          any application specific initialization (ie. hardware
//  178  *          initialization/setup, table initialization, power up
//  179  *          notificaiton ... ).
//  180  *
//  181  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  182  *                    used to send messages and set timers.
//  183  *
//  184  * @return  none
//  185  */
//  186 void SendKongkouInfor(uint8* msg);
//  187 
//  188 uint8 JieQu(uint8* ch,int pos,int length);
//  189 
//  190 
//  191 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  192  uint8 JieQu(uint8* ch,int pos,int length)  
JieQu:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function JieQu
        CODE
//  193  {  
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  194      uint8* pch=ch;  
//  195  //¶¨ÒåÒ»¸ö×Ö·ûÖ¸Õë£¬Ö¸Ïò´«µÝ½øÀ´µÄchµØÖ·¡£  
//  196      //subch=(uint8*)calloc(sizeof(uint8),length+1);  
//  197  //Í¨¹ýcallocÀ´·ÖÅäÒ»¸ölength³¤¶ÈµÄ×Ö·ûÊý×é£¬·µ»ØµÄÊÇ×Ö·ûÖ¸Õë¡£  
//  198    int i;  
//  199 //Ö»ÓÐÔÚC99ÏÂforÑ­»·ÖÐ²Å¿ÉÒÔÉùÃ÷±äÁ¿£¬ÕâÀïÐ´ÔÚÍâÃæ£¬Ìá¸ß¼æÈÝÐÔ¡£  
//  200      pch=pch+pos;  
//  201  //ÊÇpchÖ¸ÕëÖ¸ÏòposÎ»ÖÃ¡£  
//  202      //for(i=0;i<length;i++)  
//  203      //{  
//  204          subch=*(pch++);  
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        LCALL   ??Subroutine24_0 & 0xFFFF
//  205  //Ñ­»·±éÀú¸³ÖµÊý×é¡£  
//  206      //}  
//  207      //subch[length]='\0';//¼ÓÉÏ×Ö·û´®½áÊø·û¡£  
//  208      //HalUARTWrite(0,subch,sizeof(subch));
//  209      return subch;       //·µ»Ø·ÖÅäµÄ×Ö·ûÊý×éµØÖ·¡£  
??CrossCallReturnLabel_41:
        MOV     R1,A
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  210  } 
//  211 
//  212 
//  213 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 void SendKongkouInfor(uint8* msg)
SendKongkouInfor:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SendKongkouInfor
        CODE
//  215 {
        FUNCALL SendKongkouInfor, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  216 uint8 len=sizeof(msg);
//  217 afAddrType_t dstAddr;
//  218 		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  219 		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  220 		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
//  221 		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
//  222                        SAMPLEAPP_MY_CLUSTERID,
//  223                        len,  // ÏûÏ¢³¤¶È
//  224                        msg, // ÏûÏ¢ÄÚÈÝ
//  225                        &SampleApp_TransID,  // ÏûÏ¢±àºÅ
//  226                        AF_DISCV_ROUTE,
//  227                        AF_DEFAULT_RADIUS );	
??CrossCallReturnLabel_11:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  228 		  //HalUARTWrite(0, "send kkou\n",10);
//  229 
//  230 }
        MOV     A,#0xc
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
//  231 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  232 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  233 {
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
//  234   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  235   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  236   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  237 
//  238   MT_UartInit();  // ´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  239   osal_set_event(SampleApp_TaskID, MY_SEND_UART); //ÉèÖÃÊÂ¼þ
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LCALL   ?Subroutine4 & 0xFFFF
//  240   osal_set_event(SampleApp_TaskID, MY_SEND2_UART); //ÉèÖÃÊÂ¼þ
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x4
        LCALL   ?Subroutine4 & 0xFFFF
//  241   osal_set_event(SampleApp_TaskID, MY_SEND3_UART); //ÉèÖÃÊÂ¼þ
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x8
        LCALL   ?Subroutine4 & 0xFFFF
//  242   MT_UartRegisterTaskID(SampleApp_TaskID);  // ×¢²á£¬ÓÐ´®¿ÚÊÂ¼þÍ¨ÖªÎÒ
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  243   
//  244  //³õÊ¼»¯¹âÃôÄ£¿é
//  245   P2SEL &= ~0X01;     //ÉèÖÃP20ÎªÆÕÍ¨IO¿Ú  
        ANL     0xf5,#0xfe
//  246   P2DIR &= ~0X01;    // ÔÚP20¿Ú£¬ÉèÖÃÎªÊäÈëÄ£Ê½ 
        ANL     0xff,#0xfe
//  247 
//  248   // Device hardware initialization can be added here or in main() (Zmain.c).
//  249   // If the hardware is application specific - add it here.
//  250   // If the hardware is other parts of the device add it in main().
//  251 
//  252  #if defined ( BUILD_ALL_DEVICES )
//  253   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  254   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  255   // together - if they are - we will start up a coordinator. Otherwise,
//  256   // the device will start as a router.
//  257   if ( readCoordinatorJumper() )
//  258     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  259   else
//  260     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  261 #endif // BUILD_ALL_DEVICES
//  262 
//  263 #if defined ( HOLD_AUTO_START )
//  264   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  265   //  from starting the device and wait for the application to
//  266   //  start the device.
//  267   ZDOInitDevice(0);
//  268 #endif
//  269 
//  270   // Setup for the periodic message's destination address
//  271   // Broadcast to everyone
//  272   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  273   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  274   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  275 
//  276   // Setup for the flash command's destination address - Group 1
//  277   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  278   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  279   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  280 
//  281   // Fill out the endpoint description.
//  282   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  283   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  284   SampleApp_epDesc.simpleDesc
//  285             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  286   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  287 
//  288   // Register the endpoint description with the AF
//  289   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  290 
//  291   // Register for all key events - This app will handle all key events
//  292   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  293 
//  294   // By default, all devices start out in Group 1
//  295   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  296   osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  297   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  298 
//  299 #if defined ( LCD_SUPPORTED )
//  300   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
//  301 #endif
//  302 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock12
        REQUIRE P2SEL
        REQUIRE P2DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  303 
//  304 /*********************************************************************
//  305  * @fn      SampleApp_ProcessEvent
//  306  *
//  307  * @brief   Generic Application Task event processor.  This function
//  308  *          is called to process all events for the task.  Events
//  309  *          include timers, messages and any other user defined events.
//  310  *
//  311  * @param   task_id  - The OSAL assigned task ID.
//  312  * @param   events - events to process.  This is a bit map and can
//  313  *                   contain more than one event.
//  314  *
//  315  * @return  none
//  316  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  317 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  318 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SendKongkouInfor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SendKongkouInfor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x15
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        ; Saved register size: 21
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  319   afIncomingMSGPacket_t *MSGpkt;
//  320   (void)task_id;  // Intentionally unreferenced parameter
//  321 
//  322   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
//  323   {
//  324     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  325     while ( MSGpkt )
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
//  326     {
//  327       switch ( MSGpkt->hdr.event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        DEC     A
        JZ      ??SampleApp_ProcessEvent_1
        ADD     A,#-0x19
        JZ      ??SampleApp_ProcessEvent_2
        ADD     A,#0x5a
        JZ      ??SampleApp_ProcessEvent_3
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_4
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
//  328       {
//  329         // Received when a key is pressed
//  330         case KEY_CHANGE:
//  331           //HalUARTWrite(0,"1\n",2);  // ·¢ËÍ´®¿ÚÏûÏ¢
//  332           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
//  333           //open_led_1();
//  334 		  break;
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
//  335 
//  336         // Received when a messages is received (OTA) for this endpoint
//  337         case AF_INCOMING_MSG_CMD:   //½ÓÊÕµ½¿Õ¿Ú·¢¹ýÀ´µÄÏûÏ¢
//  338           SampleApp_MessageMSGCB( MSGpkt );
??SampleApp_ProcessEvent_2:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        LCALL   ??SampleApp_MessageMSGCB?relay
//  339           break;
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
//  340 
//  341         // Received whenever the device changes state in the network
//  342         case ZDO_STATE_CHANGE:
//  343           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  344           if ( (SampleApp_NwkState == DEV_ZB_COORD)
//  345               || (SampleApp_NwkState == DEV_ROUTER)
//  346               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x9
        JZ      ??SampleApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      $+5
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
//  347           {
//  348             // Start sending the periodic message in a regular interval.
//  349             osal_start_timerEx( SampleApp_TaskID,
//  350                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  351                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        LCALL   ?Subroutine2 & 0xFFFF
//  352           }
??CrossCallReturnLabel_36:
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
??SampleApp_ProcessEvent_1:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
//  353           else
//  354           {
//  355             // Device is no longer in the network
//  356           }
//  357           break;
//  358 		case CMD_SERIAL_MSG: // ´®¿ÚÊÕµ½ÏûÏ¢#include "MT.h"
//  359 		  uint8 len = ((mtOSALSerialData_t*)MSGpkt)->msg[0];  //´®¿ÚÏûÏ¢³¤¶È
//  360 		  uint8* msg = &(((mtOSALSerialData_t*)MSGpkt)->msg[1]);//´®¿ÚÏûÏ¢ÄÚÈÝ
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
//  361 		  afAddrType_t dstAddr;
//  362 		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  363 		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
//  364 		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
//  365 		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
//  366                        SAMPLEAPP_MY_CLUSTERID,
//  367                        len,  // ÏûÏ¢³¤¶È
//  368                        (uint8*)msg, // ÏûÏ¢ÄÚÈÝ
//  369                        &SampleApp_TransID,  // ÏûÏ¢±àºÅ
//  370                        AF_DISCV_ROUTE,
//  371                        AF_DEFAULT_RADIUS );
??CrossCallReturnLabel_27:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 5,#0x1e
        MOV     R0,#?V0 + 5
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 6,#SampleApp_TransID & 0xff
        MOV     ?V0 + 7,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V0 + 4,#0x3
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
//  372 		uint8* ch=msg;
//  373         JieQu(ch,3,1);
        LCALL   ?Subroutine1 & 0xFFFF
//  374 		if(subch=='3')JieQu(ch,6,1);
??CrossCallReturnLabel_46:
        XRL     A,#0x33
        JNZ     ??CrossCallReturnLabel_42
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine23_0 & 0xFFFF
//  375 		if(subch=='1')f=1;
??CrossCallReturnLabel_42:
        MOVX    A,@DPTR
        XRL     A,#0x31
        MOV     DPTR,#f
        JNZ     ??SampleApp_ProcessEvent_7
        MOV     A,#0x1
        SJMP    ??SampleApp_ProcessEvent_8
//  376 		else f=0;
??SampleApp_ProcessEvent_7:
        CLR     A
??SampleApp_ProcessEvent_8:
        MOVX    @DPTR,A
//  377 		JieQu(ch,3,1);
        LCALL   ?Subroutine1 & 0xFFFF
//  378 		if(subch=='4')s=0;
??CrossCallReturnLabel_47:
        XRL     A,#0x34
        JNZ     ??SampleApp_ProcessEvent_9
        MOV     DPTR,#`s`
        CLR     A
        MOVX    @DPTR,A
//  379 		else if (subch=='2'){
//  380         w[0]=1;
//  381 		
//  382 		  
//  383 		  break;
//  384         default:
//  385           break;
//  386       }
//  387 
//  388       // Release the memory
//  389       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_10:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  390 
//  391       // Next - if one is available
//  392       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
//  393     }
//  394 
//  395     // return unprocessed events
//  396     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_11:
        MOV     R3,A
        LJMP    ??SampleApp_ProcessEvent_12 & 0xFFFF
??SampleApp_ProcessEvent_9:
        MOVX    A,@DPTR
        XRL     A,#0x32
        JNZ     ??SampleApp_ProcessEvent_10
        MOV     DPTR,#w
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??SampleApp_ProcessEvent_5
//  397   }
//  398   	}
//  399 
//  400   // Send a message out - This event is generated by a timer
//  401   //  (setup in SampleApp_Init()).
//  402   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_13
//  403   {
//  404     // Send the periodic message
//  405     SampleApp_SendPeriodicMessage();
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        LCALL   ??SampleApp_SendPeriodicMessage?relay
//  406 
//  407     // Setup to send message again in normal period (+ a little jitter)
//  408     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  409         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x78
        MOV     R4,A
        CLR     A
        ADDC    A,#0x13
        MOV     R5,A
        LCALL   ?Subroutine2 & 0xFFFF
//  410 
//  411     // return unprocessed events
//  412     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
??CrossCallReturnLabel_37:
        MOV     A,R6
        XRL     A,#0x1
??SampleApp_ProcessEvent_14:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_11
//  413   }
//  414 
//  415     if (events & MY_SEND_UART)  // ´®¿Ú·¢ËÍÏûÏ¢µÄÊÂ¼þ
??SampleApp_ProcessEvent_13:
        ANL     A,#0x2
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_15 & 0xFFFF
//  416   	{
//  417   	//¶ÁÈ¡¹âÃôµç×è×´Ì¬£¬°µÊ±µãÁÁLED
//  418       if(P2_0==0)
        MOV     C,0xa0.0
        JNC     $+5
        LJMP    ??SampleApp_ProcessEvent_16 & 0xFFFF
//  419         {
//  420         s=0;
        MOV     DPTR,#`s`
        CLR     A
        MOVX    @DPTR,A
//  421 		T[0]='*';
        LCALL   ?Subroutine7 & 0xFFFF
//  422   		T[1]='1';
//  423   		T[2]='3';
//  424   		T[3]='1';
//  425   		T[4]='0';
//  426  		T[5]='0';
//  427   		T[6]='0';
//  428   		T[7]='1';
//  429   		T[8]='0';
??CrossCallReturnLabel_9:
        DEC     A
        LCALL   ?Subroutine12 & 0xFFFF
//  430   		unsigned char  len = 16;
//  431 		unsigned long  temp = 0; 
??CrossCallReturnLabel_15:
        LCALL   ?L_MOV_X
//  432 		unsigned char  i;
//  433 		unsigned char  *ptr=T;
        MOV     R4,#T & 0xff
        MOV     R5,#(T >> 8) & 0xff
        SJMP    ??SampleApp_ProcessEvent_17
//  434 
//  435 		while(len--) 
//  436 		{
//  437 		for(i=0x80;i!=0;i=i>>1)
??SampleApp_ProcessEvent_18:
        MOV     R1,#-0x80
//  438 		 {
//  439 			  temp = temp * 2;
??SampleApp_ProcessEvent_19:
        MOV     A,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
//  440 			  if((temp & 0x10000) != 0)
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_10000
        MOV     R0,#?V0 + 4
        LCALL   ?L_AND_X
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_19:
        JZ      ??SampleApp_ProcessEvent_20
//  441 			  temp = temp ^ 0x11021;
        MOV     DPTR,#__Constant_11021
        MOV     R0,#?V0 + 0
        LCALL   ?L_XOR_X
//  442 			  if((*ptr & i) != 0)
??SampleApp_ProcessEvent_20:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        ANL     A,R1
        JZ      ??SampleApp_ProcessEvent_21
//  443 			  temp = temp ^ (0x10000 ^ 0x11021);
        MOV     DPTR,#__Constant_1021
        MOV     R0,#?V0 + 0
        LCALL   ?L_XOR_X
//  444 		 }
??SampleApp_ProcessEvent_21:
        MOV     A,R1
        CLR     C
        RRC     A
        MOV     R1,A
        JNZ     ??SampleApp_ProcessEvent_19
//  445 	
//  446 		 ptr++;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
//  447 		}
??SampleApp_ProcessEvent_17:
        MOV     ?V0 + 12,R2
        MOV     A,#-0x1
        ADD     A,?V0 + 12
        DEC     R2
        INC     A
        JNZ     ??SampleApp_ProcessEvent_18
//  448 		jiaoyan= temp%10;
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#jiaoyan
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  449 		T[9]=jiaoyan/1000+48;
        MOV     DPTR,#jiaoyan
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        LCALL   ?Subroutine8 & 0xFFFF
//  450     	T[10]=(jiaoyan/100)%10+48;
??CrossCallReturnLabel_56:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL   ??Subroutine27_0 & 0xFFFF
//  451     	T[11]=(jiaoyan/10)%10+48;
??CrossCallReturnLabel_58:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 0
        ADD     A,#0x30
        MOV     DPTR,#T + 11
        LCALL   ??Subroutine27_0 & 0xFFFF
//  452     	T[12]=jiaoyan%10+48;
??CrossCallReturnLabel_59:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        LCALL   ?Subroutine5 & 0xFFFF
//  453 		HalUARTWrite(0,"\n",1);
//  454 		SendKongkouInfor(T);
//  455 		HalUARTWrite(0,T,13);
//  456 		if(w[0]==2)w[0]=0;
??CrossCallReturnLabel_5:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??SampleApp_ProcessEvent_22 & 0xFFFF
        CLR     A
        LJMP    ??SampleApp_ProcessEvent_23 & 0xFFFF
//  457 		
//  458           	}
//  459 		  //HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);
//  460       else
//  461         {
//  462         
//  463 		T[0]='*';
??SampleApp_ProcessEvent_16:
        LCALL   ?Subroutine7 & 0xFFFF
//  464   		T[1]='1';
//  465   		T[2]='3';
//  466   		T[3]='1';
//  467   		T[4]='0';
//  468  		T[5]='0';
//  469   		T[6]='0';
//  470   		T[7]='1';
//  471   		T[8]='1';
??CrossCallReturnLabel_10:
        LCALL   ?Subroutine12 & 0xFFFF
//  472   		unsigned char  len = 16;
//  473 		unsigned long  temp = 0; 
??CrossCallReturnLabel_16:
        LCALL   ?L_MOV_X
//  474 		unsigned char  i;
//  475 		unsigned char  *ptr=T;
        MOV     R4,#T & 0xff
        MOV     R5,#(T >> 8) & 0xff
        SJMP    ??SampleApp_ProcessEvent_24
//  476 
//  477 	while(len--) 
//  478 		{
//  479 		for(i=0x80;i!=0;i=i>>1)
??SampleApp_ProcessEvent_25:
        MOV     R1,#-0x80
//  480 		 {
//  481 			  temp = temp * 2;
??SampleApp_ProcessEvent_26:
        MOV     A,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
//  482 			  if((temp & 0x10000) != 0)
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_10000
        MOV     R0,#?V0 + 4
        LCALL   ?L_AND_X
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        JZ      ??SampleApp_ProcessEvent_27
//  483 			  temp = temp ^ 0x11021;
        MOV     DPTR,#__Constant_11021
        MOV     R0,#?V0 + 0
        LCALL   ?L_XOR_X
//  484 			  if((*ptr & i) != 0)
??SampleApp_ProcessEvent_27:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        ANL     A,R1
        JZ      ??SampleApp_ProcessEvent_28
//  485 			  temp = temp ^ (0x10000 ^ 0x11021);
        MOV     DPTR,#__Constant_1021
        MOV     R0,#?V0 + 0
        LCALL   ?L_XOR_X
//  486 		 }
??SampleApp_ProcessEvent_28:
        MOV     A,R1
        CLR     C
        RRC     A
        MOV     R1,A
        JNZ     ??SampleApp_ProcessEvent_26
//  487 	
//  488 		 ptr++;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
//  489 		}
??SampleApp_ProcessEvent_24:
        MOV     ?V0 + 4,R2
        MOV     A,#-0x1
        ADD     A,?V0 + 4
        DEC     R2
        INC     A
        JNZ     ??SampleApp_ProcessEvent_25
//  490 		jiaoyan= temp%10;
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,?V0 + 1
        MOV     ?V0 + 10,?V0 + 2
        MOV     ?V0 + 11,?V0 + 3
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        MOVX    @DPTR,A
//  491 	T[9]=jiaoyan/1000+48;
        MOV     DPTR,#jiaoyan
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 8
        LCALL   ?Subroutine11 & 0xFFFF
//  492     T[10]=(jiaoyan/100)%10+48;
??CrossCallReturnLabel_52:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 8
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL   ??Subroutine26_0 & 0xFFFF
//  493     T[11]=(jiaoyan/10)%10+48;
??CrossCallReturnLabel_54:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 8
        ADD     A,#0x30
        MOV     DPTR,#T + 11
        MOVX    @DPTR,A
//  494     T[12]=jiaoyan%10+48;
        MOV     DPTR,#jiaoyan
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        LCALL   ?Subroutine5 & 0xFFFF
//  495 	HalUARTWrite(0,"\n",1);
//  496 	SendKongkouInfor(T);
//  497 	HalUARTWrite(0,T,13);
//  498 	w[0]=2;
//  499      }
??CrossCallReturnLabel_6:
        MOV     A,#0x2
??SampleApp_ProcessEvent_23:
        MOVX    @DPTR,A
//  500 		osal_start_timerEx (SampleApp_TaskID, MY_SEND_UART, 1000); //5s¶¨Ê±Æ÷
??SampleApp_ProcessEvent_22:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x2
        LCALL   ??Subroutine22_0 & 0xFFFF
//  501           
//  502 		  return (events ^ MY_SEND_UART);
??CrossCallReturnLabel_38:
        MOV     A,R6
        XRL     A,#0x2
        LJMP    ??SampleApp_ProcessEvent_14 & 0xFFFF
//  503   	}
//  504 	if (events & MY_SEND2_UART)  
??SampleApp_ProcessEvent_15:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??CrossCallReturnLabel_39
//  505   	{
//  506 		//HalUARTWrite(0,"a",1);
//  507 
//  508 	 if(f==1)
        MOV     DPTR,#f
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_ProcessEvent_29
//  509      	{
//  510         e=!e;
        MOV     DPTR,#e
        MOVX    A,@DPTR
        JNZ     ??SampleApp_ProcessEvent_30
        MOV     A,#0x1
        SJMP    ??SampleApp_ProcessEvent_31
??SampleApp_ProcessEvent_30:
        CLR     A
??SampleApp_ProcessEvent_31:
        MOVX    @DPTR,A
//  511 		if(e){
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_29
//  512              HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??SampleApp_ProcessEvent_32
//  513 			 }
//  514 		else HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
??SampleApp_ProcessEvent_29:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??SampleApp_ProcessEvent_32:
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  515 	 	}
//  516 	 else HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
//  517 	 if(s==1)
        MOV     DPTR,#`s`
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_ProcessEvent_33
//  518      	{
//  519         r=!r;
        MOV     DPTR,#r
        MOVX    A,@DPTR
        JNZ     ??SampleApp_ProcessEvent_34
        MOV     A,#0x1
        SJMP    ??SampleApp_ProcessEvent_35
??SampleApp_ProcessEvent_34:
        CLR     A
??SampleApp_ProcessEvent_35:
        MOVX    @DPTR,A
//  520 		if(r){
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_33
//  521              HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??SampleApp_ProcessEvent_36
//  522 			 }
//  523 		else HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
??SampleApp_ProcessEvent_33:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??SampleApp_ProcessEvent_36:
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  524 	 	}
//  525 	 else HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
//  526 	 osal_start_timerEx (SampleApp_TaskID, MY_SEND2_UART, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x4
        LCALL   ??Subroutine22_0 & 0xFFFF
//  527 	}
//  528 	if (events & MY_SEND3_UART)  
??CrossCallReturnLabel_39:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??CrossCallReturnLabel_40
//  529 		{
//  530 		 
//  531 		    if(w[0]==1){
        MOV     DPTR,#w
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_ProcessEvent_37
//  532 			z=!z;
        MOV     DPTR,#z
        MOVX    A,@DPTR
        JNZ     ??SampleApp_ProcessEvent_38
        MOV     A,#0x1
        SJMP    ??SampleApp_ProcessEvent_39
??SampleApp_ProcessEvent_38:
        CLR     A
??SampleApp_ProcessEvent_39:
        MOVX    @DPTR,A
//  533 			if(z){
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_40
//  534 				 HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??SampleApp_ProcessEvent_41
//  535 				 }
//  536 			else HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
??SampleApp_ProcessEvent_40:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??SampleApp_ProcessEvent_41:
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  537 			}
//  538 			
//  539 		 osal_start_timerEx (SampleApp_TaskID, MY_SEND3_UART, 500);
??SampleApp_ProcessEvent_37:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x8
        LCALL   ??Subroutine22_0 & 0xFFFF
//  540 		}
//  541 
//  542   // Discard unknown events
//  543   return 0;
??CrossCallReturnLabel_40:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_12:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R7,#0xd
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock17
        REQUIRE _A_P2
//  544 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOVX    @DPTR,A
        MOV     R2,#0x10
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     A,#0x31
        MOVX    @DPTR,A
        INC     DPTR
        DEC     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker26 Using cfiCommon1
        CFI (cfiPicker26) NoFunction
        CFI (cfiPicker26) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     DPTR,#w
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOV     R2,#0x1
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        MOVX    A,@DPTR
        MOV     DPTR,#subch
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53
//  545 
//  546 
//  547 /*********************************************************************
//  548  * Event Generation Functions
//  549  */
//  550 /*********************************************************************
//  551  * @fn      SampleApp_HandleKeys
//  552  *
//  553  * @brief   Handles all key events for this device.
//  554  *
//  555  * @param   shift - true if in shift/alt.
//  556  * @param   keys - bit field for key events. Valid entries:
//  557  *                 HAL_KEY_SW_2
//  558  *                 HAL_KEY_SW_1
//  559  *
//  560  * @return  none
//  561  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  562 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  563 {
        FUNCALL SampleApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, SendKongkouInfor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, SendKongkouInfor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 8,R2
//  564   (void)shift;  // Intentionally unreferenced parameter
//  565   
//  566   if ( keys & HAL_KEY_SW_7 )
        MOV     A,R2
        MOV     C,0xE0 /* A   */.6
        JC      $+5
        LJMP    ??CrossCallReturnLabel_26 & 0xFFFF
//  567   {
//  568 
//  569   if(w[0]==2){
        MOV     DPTR,#w
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_26 & 0xFFFF
//  570   if(s==0)
        MOV     DPTR,#`s`
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??SampleApp_HandleKeys_0 & 0xFFFF
//  571   {s=1;
        MOV     A,#0x1
        LCALL   ?Subroutine6 & 0xFFFF
//  572   T[0]='*';
//  573   T[1]='1';
//  574   T[2]='3';
//  575   T[3]='4';
//  576   T[4]='0';
//  577   T[5]='0';
//  578   T[6]='0';
//  579   T[7]='0';
//  580   T[8]='0';
??CrossCallReturnLabel_7:
        LCALL   ?Subroutine13 & 0xFFFF
//  581   unsigned char  len = 16;
//  582   unsigned long  temp = 0; 
??CrossCallReturnLabel_17:
        LCALL   ?L_MOV_X
//  583   unsigned char  i;
//  584   unsigned char  *ptr=T;
        MOV     R4,#T & 0xff
        MOV     R5,#(T >> 8) & 0xff
        SJMP    ??SampleApp_HandleKeys_1
//  585 
//  586 	while(len--) 
//  587 	{
//  588 	for(i=0x80;i!=0;i=i>>1)
??SampleApp_HandleKeys_2:
        MOV     R2,#-0x80
//  589 	{
//  590 		temp = temp * 2;
??SampleApp_HandleKeys_3:
        MOV     A,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
//  591 		if((temp & 0x10000) != 0)
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_10000
        MOV     R0,#?V0 + 4
        LCALL   ?L_AND_X
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_21:
        JZ      ??SampleApp_HandleKeys_4
//  592 		temp = temp ^ 0x11021;
        MOV     DPTR,#__Constant_11021
        MOV     R0,#?V0 + 0
        LCALL   ?L_XOR_X
//  593 		if((*ptr & i) != 0)
??SampleApp_HandleKeys_4:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        ANL     A,R2
        JZ      ??SampleApp_HandleKeys_5
//  594 			  temp = temp ^ (0x10000 ^ 0x11021);
        MOV     DPTR,#__Constant_1021
        MOV     R0,#?V0 + 0
        LCALL   ?L_XOR_X
//  595 		 }
??SampleApp_HandleKeys_5:
        MOV     A,R2
        CLR     C
        RRC     A
        MOV     R2,A
        JNZ     ??SampleApp_HandleKeys_3
//  596 	
//  597 		 ptr++;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
//  598 		}
??SampleApp_HandleKeys_1:
        MOV     A,R1
        MOV     R6,A
        MOV     A,#-0x1
        ADD     A,R6
        DEC     R1
        INC     A
        JNZ     ??SampleApp_HandleKeys_2
//  599   jiaoyan= temp%10;
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#jiaoyan
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  600   T[9]=jiaoyan/1000+48;
        MOV     DPTR,#jiaoyan
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        LCALL   ?Subroutine8 & 0xFFFF
//  601   T[10]=(jiaoyan/100)%10+48;
//  602   T[11]=(jiaoyan/10)%10+48;
//  603   T[12]=jiaoyan%10+48;
//  604   HalUARTWrite(0,"\n",1);
//  605   SendKongkouInfor(T);
//  606   HalUARTWrite(0,T,13); 
//  607   	}
??CrossCallReturnLabel_57:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 0
        LJMP    ??SampleApp_HandleKeys_6 & 0xFFFF
//  608   else
//  609   	{
//  610 	  s=0;
??SampleApp_HandleKeys_0:
        CLR     A
        LCALL   ?Subroutine6 & 0xFFFF
//  611 		T[0]='*';
//  612 		T[1]='1';
//  613 		T[2]='3';
//  614 		T[3]='4';
//  615 		T[4]='0';
//  616 		T[5]='0';
//  617 		T[6]='0';
//  618 		T[7]='0';
//  619 		T[8]='3';
??CrossCallReturnLabel_8:
        MOV     A,#0x33
        LCALL   ?Subroutine13 & 0xFFFF
//  620 		unsigned char  len = 16;
//  621 		unsigned long  temp = 0; 
??CrossCallReturnLabel_18:
        LCALL   ?L_MOV_X
//  622 		unsigned char  i;
//  623 		unsigned char  *ptr=T;
        MOV     R4,#T & 0xff
        MOV     R5,#(T >> 8) & 0xff
        SJMP    ??SampleApp_HandleKeys_7
//  624 	  
//  625 		  while(len--) 
//  626 		  {
//  627 		  for(i=0x80;i!=0;i=i>>1)
??SampleApp_HandleKeys_8:
        MOV     R2,#-0x80
//  628 		  {
//  629 			  temp = temp * 2;
??SampleApp_HandleKeys_9:
        MOV     A,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
//  630 			  if((temp & 0x10000) != 0)
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_10000
        MOV     R0,#?V0 + 4
        LCALL   ?L_AND_X
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_22:
        JZ      ??SampleApp_HandleKeys_10
//  631 			  temp = temp ^ 0x11021;
        MOV     DPTR,#__Constant_11021
        MOV     R0,#?V0 + 0
        LCALL   ?L_XOR_X
//  632 			  if((*ptr & i) != 0)
??SampleApp_HandleKeys_10:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        ANL     A,R2
        JZ      ??SampleApp_HandleKeys_11
//  633 					temp = temp ^ (0x10000 ^ 0x11021);
        MOV     DPTR,#__Constant_1021
        MOV     R0,#?V0 + 0
        LCALL   ?L_XOR_X
//  634 			   }
??SampleApp_HandleKeys_11:
        MOV     A,R2
        CLR     C
        RRC     A
        MOV     R2,A
        JNZ     ??SampleApp_HandleKeys_9
//  635 		  
//  636 			   ptr++;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
//  637 			  }
??SampleApp_HandleKeys_7:
        MOV     A,R1
        MOV     R7,A
        MOV     A,#-0x1
        ADD     A,R7
        DEC     R1
        INC     A
        JNZ     ??SampleApp_HandleKeys_8
//  638 		jiaoyan= temp%10;
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        LCALL   ?Subroutine10 & 0xFFFF
//  639 		T[9]=jiaoyan/1000+48;
//  640 		T[10]=(jiaoyan/100)%10+48;
//  641 		T[11]=(jiaoyan/10)%10+48;
//  642 		T[12]=jiaoyan%10+48;
//  643 		HalUARTWrite(0,"\n",1);
//  644 		SendKongkouInfor(T);
//  645 		HalUARTWrite(0,T,13); 
//  646 
//  647   }
//  648     /* This key sends the Flash Command is sent to Group 1.
//  649      * This device will not receive the Flash Command from this
//  650      * device (even if it belongs to group 1).
//  651      */
//  652     //SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
//  653     /*uint8* msg="1";
//  654 	afAddrType_t dstAddr;
//  655 	dstAddr.addrMode=Addr16Bit;//µØÖ·Ä£Ê½Îª16Î»¶ÌµØÖ·
//  656 	dstAddr.endPoint=SAMPLEAPP_ENDPOINT;
//  657 	dstAddr.addr.shortAddr=0xFFFF;//0xFFFF±íÊ¾¹ã²¥
//  658 	AF_DataRequest( &dstAddr, &SampleApp_epDesc,
//  659                        SAMPLEAPP_MY_CLUSTERID,
//  660                        sizeof(msg),//ÏûÏ¢³¤¶È
//  661                        msg,//ÏûÏ¢ÄÚÈÝ,
//  662                        &SampleApp_TransID,//ÏûÏ¢±àºÅ
//  663                        AF_DISCV_ROUTE,
//  664                        AF_DEFAULT_RADIUS );	*/	
//  665    // HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
//  666   	}
//  667   }
??CrossCallReturnLabel_14:
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 4
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 4
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 4
??SampleApp_HandleKeys_6:
        ADD     A,#0x30
        MOV     DPTR,#T + 11
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        LCALL   ?Subroutine18 & 0xFFFF
//  668 
//  669   if ( keys & HAL_KEY_SW_6 )
??CrossCallReturnLabel_26:
        MOV     A,?V0 + 8
        MOV     C,0xE0 /* A   */.5
        JNC     ??SampleApp_HandleKeys_12
//  670   {
//  671     /* The Flashr Command is sent to Group 1.
//  672      * This key toggles this device in and out of group 1.
//  673      * If this device doesn't belong to group 1, this application
//  674      * will not receive the Flash command sent to group 1.
//  675      */
//  676     //HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
//  677     uint8* msg="0";
//  678 	afAddrType_t dstAddr;
//  679 	dstAddr.addrMode=Addr16Bit;//µØÖ·Ä£Ê½Îª16Î»¶ÌµØÖ·
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  680 	dstAddr.endPoint=SAMPLEAPP_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  681 	dstAddr.addr.shortAddr=0xFFFF;//0xFFFF±íÊ¾¹ã²¥
//  682 	AF_DataRequest( &dstAddr, &SampleApp_epDesc,
//  683                        SAMPLEAPP_MY_CLUSTERID,
//  684                        sizeof(msg),//ÏûÏ¢³¤¶È
//  685                        msg,//ÏûÏ¢ÄÚÈÝ,
//  686                        &SampleApp_TransID,//ÏûÏ¢±àºÅ
//  687                        AF_DISCV_ROUTE,
//  688                        AF_DEFAULT_RADIUS );		
//  689   }
??CrossCallReturnLabel_12:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#`?<Constant "0">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "0">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  690 }
??SampleApp_HandleKeys_12:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R7,#0x9
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_6
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker58 Using cfiCommon1
        CFI (cfiPicker58) NoFunction
        CFI (cfiPicker58) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x30
        MOV     DPTR,#T + 12
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function SendKongkouInfor
        ; Setup parameters for call to function SendKongkouInfor
        ; Setup parameters for call to function SendKongkouInfor
        MOV     R2,#T & 0xff
        MOV     R3,#(T >> 8) & 0xff
        LCALL   ??SendKongkouInfor?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,#T & 0xff
        MOV     R3,#(T >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        MOV     A,?V0 + 0
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        ADD     A,#0x30
        MOV     DPTR,#T + 10
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        ORL     A,?V0 + 6
        ORL     A,?V0 + 7
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOVX    @DPTR,A
        MOV     R1,#0x10
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        ADD     A,#0x30
        MOV     DPTR,#T + 9
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#jiaoyan
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        MOV     DPTR,#jiaoyan
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_28:
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond89 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_11
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_12
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        MOV     A,#0x14
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x30
        MOV     DPTR,#T + 9
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker103 Using cfiCommon1
        CFI (cfiPicker103) NoFunction
        CFI (cfiPicker103) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#jiaoyan
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiPicker103

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_30:
        INC     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond107 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_10
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_7
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_8
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker111 Using cfiCommon1
        CFI (cfiPicker111) NoFunction
        CFI (cfiPicker111) Picker
        MOV     DPTR,#T
        MOV     A,#0x2a
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x31
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x33
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiPicker111
//  691 
//  692 /*********************************************************************
//  693  * LOCAL FUNCTIONS
//  694  */
//  695 
//  696 /*********************************************************************
//  697  * @fn      SampleApp_MessageMSGCB
//  698  *
//  699  * @brief   Data message processor callback.  This function processes
//  700  *          any incoming data - probably from other devices.  So, based
//  701  *          on cluster ID, perform the intended action.
//  702  *
//  703  * @param   none
//  704  *
//  705  * @return  none
//  706  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  707 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  708 {
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  709   uint16 flashTime;
//  710 
//  711   switch ( pkt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        CODE
//  712   {
//  713     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  714       break;
//  715 
//  716     case SAMPLEAPP_FLASH_CLUSTERID:
//  717       flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
//  718       HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
??SampleApp_MessageMSGCB_1:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  719       break;
        SJMP    ??SampleApp_MessageMSGCB_0
//  720 	
//  721     case SAMPLEAPP_MY_CLUSTERID:   // ÎÒÃÇ×Ô¶¨ÒåµÄÏûÏ¢
//  722 		/*HalUARTWrite(0,pkt->cmd.Data,pkt->cmd.DataLength);	// ¿Õ¿ÚÏûÏ¢×ª·¢
//  723         if(pkt->cmd.Data[0]=='1')
//  724 		HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
//  725 		if(pkt->cmd.Data[0]=='0')
//  726 		HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);*/
//  727         HalUARTWrite(0,pkt->cmd.Data,pkt->cmd.DataLength);	// ¿Õ¿ÚÏûÏ¢×ª·¢
??SampleApp_MessageMSGCB_2:
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_24:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  728 		uint8* q=(uint8*)pkt;
//  729 
//  730 		uint8* ch=q;
//  731 		JieQu(ch,3,1);
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine23_0 & 0xFFFF
//  732 		if(subch=='3')JieQu(ch,6,1);
??CrossCallReturnLabel_43:
        XRL     A,#0x33
        JNZ     ??CrossCallReturnLabel_44
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine23_0 & 0xFFFF
//  733 		if(subch=='1')f=1;
??CrossCallReturnLabel_44:
        MOVX    A,@DPTR
        XRL     A,#0x31
        MOV     DPTR,#f
        JNZ     ??SampleApp_MessageMSGCB_3
        MOV     A,#0x1
        SJMP    ??SampleApp_MessageMSGCB_4
//  734 		else f=0;
??SampleApp_MessageMSGCB_3:
        CLR     A
??SampleApp_MessageMSGCB_4:
        MOVX    @DPTR,A
//  735 		JieQu(ch,3,1);
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine23_0 & 0xFFFF
//  736 		if(subch=='4')s=0;
??CrossCallReturnLabel_45:
        XRL     A,#0x34
        JNZ     ??SampleApp_MessageMSGCB_5
        MOV     DPTR,#`s`
        CLR     A
        SJMP    ??SampleApp_MessageMSGCB_6
//  737 		else if (subch=='2'){
??SampleApp_MessageMSGCB_5:
        MOVX    A,@DPTR
        XRL     A,#0x32
        JNZ     ??SampleApp_MessageMSGCB_0
//  738         w[0]=1;
        MOV     DPTR,#w
        MOV     A,#0x1
??SampleApp_MessageMSGCB_6:
        MOVX    @DPTR,A
//  739 		}
//  740 		break;
//  741   }
//  742 }
??SampleApp_MessageMSGCB_0:
        LJMP    ??Subroutine28_0 & 0xFFFF
        CFI EndBlock cfiBlock112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        ; Setup parameters for call to function HalLedBlink
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118
//  743 
//  744 /*********************************************************************
//  745  * @fn      SampleApp_SendPeriodicMessage
//  746  *
//  747  * @brief   Send the periodic message.
//  748  *
//  749  * @param   none
//  750  *
//  751  * @return  none
//  752  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  753 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock119 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  754 {
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  755   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  756                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  757                        1,
//  758                        (uint8*)&SampleAppPeriodicCounter,
//  759                        &SampleApp_TransID,
//  760                        AF_DISCV_ROUTE,
//  761                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
        MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_34:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock119
//  762   {
//  763   }
//  764   else
//  765   {
//  766     // Error occurred in request to send.
//  767   }
//  768 }
//  769 
//  770 /*********************************************************************
//  771  * @fn      SampleApp_SendFlashMessage
//  772  *
//  773  * @brief   Send the flash message to group 1.
//  774  *
//  775  * @param   flashTime - in milliseconds
//  776  *
//  777  * @return  none
//  778  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  779 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock120 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  780 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  781   uint8 buffer[3];
//  782   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  783   buffer[1] = LO_UINT16( flashTime );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  784   buffer[2] = HI_UINT16( flashTime );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  785 
//  786   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  787                        SAMPLEAPP_FLASH_CLUSTERID,
//  788                        3,
//  789                        buffer,
//  790                        &SampleApp_TransID,
//  791                        AF_DISCV_ROUTE,
//  792                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  793   {
//  794   }
//  795   else
//  796   {
//  797     // Error occurred in request to send.
//  798   }
//  799 }
        MOV     A,#0x3
        CFI EndBlock cfiBlock120
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock121
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiBlock122 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock122

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??JieQu?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    JieQu

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendKongkouInfor?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendKongkouInfor

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "\\n">`:
        DB "\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "0">`:
        DB "0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10000:
        DD 65536

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_11021:
        DD 69665

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1021:
        DD 4129

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_a:
        DD 10

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        END
//  800 
//  801 /*********************************************************************
//  802 *********************************************************************/
// 
// 2 589 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
//    58 bytes in segment XDATA_ROM_C
//    77 bytes in segment XDATA_Z
// 
// 2 637 bytes of CODE  memory
//    30 bytes of CONST memory (+ 28 bytes shared)
//     0 bytes of DATA  memory (+  3 bytes shared)
//    77 bytes of XDATA memory
//
//Errors: none
//Warnings: 6

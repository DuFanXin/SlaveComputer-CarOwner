###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         24/Jul/2017  14:43:50 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\P #
#                          rojects\zstack\Samples\SampleApp\Source\SampleApp. #
#                          c                                                  #
#    Command line       =  -f "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹â #
#                          Ãô\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wEndev.cfg" (-DCPU32MHZ      #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00400000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\Source\SampleApp.c" -D             #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹ #
#                          âÃô\Projects\zstack\Samples\SampleApp\CC2530DB\End #
#                          DeviceEB\List\" -lA "C:\Documents and              #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\EndDeviceEB\List\"        #
#                          --diag_suppress Pe001,Pa010 -o "C:\Documents and   #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\EndDeviceEB\Obj\" -e      #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹â #
#                          Ãô\Projects\zstack\Samples\SampleApp\CC2530DB\"    #
#                          -I "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹â #
#                          Ãô\Projects\zstack\Samples\SampleApp\CC2530DB\..\S #
#                          ource\" -I "C:\Documents and                       #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\" #
#                           -I "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹ #
#                          âÃô\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\Components\hal\include\" -I            #
#                          "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\" -I        #
#                          "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\include\" -I "C:\Documents  #
#                          and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mac\high_level\" -I "C:\Documents and         #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\" -I "C:\Documents and        #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\" -I              #
#                          "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mt\" -I "C:\Documents and       #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \osal\include\" -I "C:\Documents and               #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\" -I "C:\Documents and             #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\sdata\" -I "C:\Documents and             #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\" -I "C:\Documents and                   #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\nwk\" -I "C:\Documents and                  #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\" -I "C:\Documents and                 #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sec\" -I "C:\Documents and                  #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\" -I "C:\Documents and                  #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\zdo\" -I "C:\Documents and                  #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\" -I "C:\Documents and                       #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\f8w\" -Ohz --require_prototypes              #
#    List file          =  C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\EndDevic #
#                          eEB\List\SampleApp.lst                             #
#    Object file        =  C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\EndDevic #
#                          eEB\Obj\SampleApp.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include "MT_UART.h"  // ´®¿Ú
     76          #include "MT.h"
     77          
     78          /*********************************************************************
     79           * MACROS
     80           */
     81          
     82          /*********************************************************************
     83           * CONSTANTS
     84           */
     85          
     86          /*********************************************************************
     87           * TYPEDEFS
     88           */
     89          
     90          /*********************************************************************
     91           * GLOBAL VARIABLES
     92           */
     93          
     94          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     95          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
     96          {
     97            SAMPLEAPP_PERIODIC_CLUSTERID,
     98            SAMPLEAPP_FLASH_CLUSTERID
     99          };
    100          

   \                                 In  segment XDATA_ROM_C, align 1
    101          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    102          {
    103            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    104            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    105            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    106            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    107            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    108            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    109            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    112          };
    113          
    114          // This is the Endpoint/Interface description.  It is defined here, but
    115          // filled-in in SampleApp_Init().  Another way to go would be to fill
    116          // in the structure here and make it a "const" (in code space).  The
    117          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    119          
    120          /*********************************************************************
    121           * EXTERNAL VARIABLES
    122           */
    123          
    124          /*********************************************************************
    125           * EXTERNAL FUNCTIONS
    126           */
    127          
    128          /*********************************************************************
    129           * LOCAL VARIABLES
    130           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132                                    // This variable will be received when
    133                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 subch;
   \                     subch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          unsigned long jiaoyan;
   \                     jiaoyan:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          unsigned char T[13]; 	//ÎÂ¶È+ÌáÊ¾·û	
   \                     T:
   \   000000                DS 13
   \   00000D                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          bool f=0;//»ð¾¯ÅÐ¶Ï
   \                     f:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          bool s=0;//ºô½Ð×´Ì¬
   \                     `s`:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          bool e=0;//»ð¾¯ÉÁË¸
   \                     e:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          bool r=0;//ºô½ÐÉÁË¸
   \                     r:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          bool z=0;//µÈ´ý×´Ì¬
   \                     z:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8 w[1]={0};//³µÎ»×´Ì¬
   \                     w:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          
    155          
    156          /*********************************************************************
    157           * LOCAL FUNCTIONS
    158           */
    159          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    160          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    161          void SampleApp_SendPeriodicMessage( void );
    162          void SampleApp_SendFlashMessage( uint16 flashTime );
    163          
    164          /*********************************************************************
    165           * NETWORK LAYER CALLBACKS
    166           */
    167          
    168          /*********************************************************************
    169           * PUBLIC FUNCTIONS
    170           */
    171          
    172          /*********************************************************************
    173           * @fn      SampleApp_Init
    174           *
    175           * @brief   Initialization function for the Generic App Task.
    176           *          This is called during initialization and should contain
    177           *          any application specific initialization (ie. hardware
    178           *          initialization/setup, table initialization, power up
    179           *          notificaiton ... ).
    180           *
    181           * @param   task_id - the ID assigned by OSAL.  This ID should be
    182           *                    used to send messages and set timers.
    183           *
    184           * @return  none
    185           */
    186          void SendKongkouInfor(uint8* msg);
    187          
    188          uint8 JieQu(uint8* ch,int pos,int length);
    189          
    190          
    191          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192           uint8 JieQu(uint8* ch,int pos,int length)  
   \                     JieQu:
    193           {  
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    194               uint8* pch=ch;  
    195           //¶¨ÒåÒ»¸ö×Ö·ûÖ¸Õë£¬Ö¸Ïò´«µÝ½øÀ´µÄchµØÖ·¡£  
    196               //subch=(uint8*)calloc(sizeof(uint8),length+1);  
    197           //Í¨¹ýcallocÀ´·ÖÅäÒ»¸ölength³¤¶ÈµÄ×Ö·ûÊý×é£¬·µ»ØµÄÊÇ×Ö·ûÖ¸Õë¡£  
    198            // int i;  
    199          //Ö»ÓÐÔÚC99ÏÂforÑ­»·ÖÐ²Å¿ÉÒÔÉùÃ÷±äÁ¿£¬ÕâÀïÐ´ÔÚÍâÃæ£¬Ìá¸ß¼æÈÝÐÔ¡£  
    200               pch=pch+pos;  
    201           //ÊÇpchÖ¸ÕëÖ¸ÏòposÎ»ÖÃ¡£  
    202               //for(i=0;i<length;i++)  
    203               //{  
    204                   subch=*(pch++);  
   \   000004   EA           MOV     A,R2
   \   000005   2C           ADD     A,R4
   \   000006   F582         MOV     DPL,A
   \   000008   EB           MOV     A,R3
   \   000009   3D           ADDC    A,R5
   \   00000A   F583         MOV     DPH,A
   \   00000C   12....       LCALL   ??Subroutine23_0 & 0xFFFF
    205           //Ñ­»·±éÀú¸³ÖµÊý×é¡£  
    206               //}  
    207               //subch[length]='\0';//¼ÓÉÏ×Ö·û´®½áÊø·û¡£  
    208               //HalUARTWrite(0,subch,sizeof(subch));
    209               return subch;       //·µ»Ø·ÖÅäµÄ×Ö·ûÊý×éµØÖ·¡£  
   \                     ??CrossCallReturnLabel_46:
   \   00000F   F9           MOV     R1,A
   \   000010   D083         POP     DPH
   \   000012   D082         POP     DPL
   \   000014   02....       LJMP    ?BRET
    210           } 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   90....       MOV     DPTR,#subch
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    211          
    212          
    213          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    214          void SendKongkouInfor(uint8* msg)
   \                     SendKongkouInfor:
    215          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    216          uint8 len=sizeof(msg);
    217          afAddrType_t dstAddr;
    218          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    219          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000012   7409         MOV     A,#0x9
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine5 & 0xFFFF
    220          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    221          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    222                                 SAMPLEAPP_MY_CLUSTERID,
    223                                 len,  // ÏûÏ¢³¤¶È
    224                                 msg, // ÏûÏ¢ÄÚÈÝ
    225                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    226                                 AF_DISCV_ROUTE,
    227                                 AF_DEFAULT_RADIUS );	
   \                     ??CrossCallReturnLabel_5:
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000020   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   8A..         MOV     ?V0 + 0,R2
   \   00002A   8B..         MOV     ?V0 + 1,R3
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..02       MOV     ?V0 + 0,#0x2
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..03       MOV     ?V0 + 0,#0x3
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7920         MOV     R1,#0x20
   \   000046   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000048   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00004A   7409         MOV     A,#0x9
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
    228          		  //HalUARTWrite(0, "send kkou\n",10);
    229          
    230          }
   \   000055   740C         MOV     A,#0xc
   \   000057   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine20_0
   \   000004                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003   75..1E       MOV     ?V0 + 0,#0x1e
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7414         MOV     A,#0x14
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine27_0
   \   000003                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    231          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    232          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    233          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    234            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    235            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    236            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    237          
    238            MT_UartInit();  // ´®¿Ú³õÊ¼»¯
   \   000015                ; Setup parameters for call to function MT_UartInit
   \   000015   12....       LCALL   ??MT_UartInit?relay
    239            osal_set_event(SampleApp_TaskID, MY_SEND_UART); //ÉèÖÃÊÂ¼þ
   \   000018                ; Setup parameters for call to function osal_set_event
   \   000018   7A02         MOV     R2,#0x2
   \   00001A   12....       LCALL   ?Subroutine4 & 0xFFFF
    240            osal_set_event(SampleApp_TaskID, MY_SEND2_UART); //ÉèÖÃÊÂ¼þ
   \                     ??CrossCallReturnLabel_2:
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A04         MOV     R2,#0x4
   \   00001F   12....       LCALL   ?Subroutine4 & 0xFFFF
    241            osal_set_event(SampleApp_TaskID, MY_SEND3_UART); //ÉèÖÃÊÂ¼þ
   \                     ??CrossCallReturnLabel_3:
   \   000022                ; Setup parameters for call to function osal_set_event
   \   000022   7A08         MOV     R2,#0x8
   \   000024   12....       LCALL   ?Subroutine4 & 0xFFFF
    242            MT_UartRegisterTaskID(SampleApp_TaskID);  // ×¢²á£¬ÓÐ´®¿ÚÊÂ¼þÍ¨ÖªÎÒ
   \                     ??CrossCallReturnLabel_4:
   \   000027                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000027   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   ??MT_UartRegisterTaskID?relay
    243            
    244           //³õÊ¼»¯¹âÃôÄ£¿é
    245            P2SEL &= ~0X01;     //ÉèÖÃP20ÎªÆÕÍ¨IO¿Ú  
   \   00002F   53F5FE       ANL     0xf5,#0xfe
    246            P2DIR &= ~0X01;    // ÔÚP20¿Ú£¬ÉèÖÃÎªÊäÈëÄ£Ê½ 
   \   000032   53FFFE       ANL     0xff,#0xfe
    247          
    248            // Device hardware initialization can be added here or in main() (Zmain.c).
    249            // If the hardware is application specific - add it here.
    250            // If the hardware is other parts of the device add it in main().
    251          
    252           #if defined ( BUILD_ALL_DEVICES )
    253            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    254            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    255            // together - if they are - we will start up a coordinator. Otherwise,
    256            // the device will start as a router.
    257            if ( readCoordinatorJumper() )
    258              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    259            else
    260              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    261          #endif // BUILD_ALL_DEVICES
    262          
    263          #if defined ( HOLD_AUTO_START )
    264            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    265            //  from starting the device and wait for the application to
    266            //  start the device.
    267            ZDOInitDevice(0);
    268          #endif
    269          
    270            // Setup for the periodic message's destination address
    271            // Broadcast to everyone
    272            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000035   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000038   740F         MOV     A,#0xf
   \   00003A   F0           MOVX    @DPTR,A
    273            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003B   A3           INC     DPTR
   \   00003C   7414         MOV     A,#0x14
   \   00003E   F0           MOVX    @DPTR,A
    274            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00003F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000042   74FF         MOV     A,#-0x1
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   F0           MOVX    @DPTR,A
    275          
    276            // Setup for the flash command's destination address - Group 1
    277            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000047   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00004A   7401         MOV     A,#0x1
   \   00004C   F0           MOVX    @DPTR,A
    278            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00004D   A3           INC     DPTR
   \   00004E   7414         MOV     A,#0x14
   \   000050   F0           MOVX    @DPTR,A
    279            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000051   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
    280          
    281            // Fill out the endpoint description.
    282            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005A   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005D   7414         MOV     A,#0x14
   \   00005F   F0           MOVX    @DPTR,A
    283            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000060   A3           INC     DPTR
   \   000061   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000067   F0           MOVX    @DPTR,A
    284            SampleApp_epDesc.simpleDesc
    285                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000068   A3           INC     DPTR
   \   000069   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006F   F0           MOVX    @DPTR,A
    286            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000070   A3           INC     DPTR
   \   000071   E4           CLR     A
   \   000072   F0           MOVX    @DPTR,A
    287          
    288            // Register the endpoint description with the AF
    289            afRegister( &SampleApp_epDesc );
   \   000073                ; Setup parameters for call to function afRegister
   \   000073   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000075   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000077   12....       LCALL   ??afRegister?relay
    290          
    291            // Register for all key events - This app will handle all key events
    292            RegisterForKeys( SampleApp_TaskID );
   \   00007A                ; Setup parameters for call to function RegisterForKeys
   \   00007A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??RegisterForKeys?relay
    293          
    294            // By default, all devices start out in Group 1
    295            SampleApp_Group.ID = 0x0001;
   \   000082   90....       MOV     DPTR,#SampleApp_Group
   \   000085   7401         MOV     A,#0x1
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
    296            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00008B                ; Setup parameters for call to function osal_memcpy
   \   00008B   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008E   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000098   7C07         MOV     R4,#0x7
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009E   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A0   12....       LCALL   ??osal_memcpy?relay
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
    297            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A8                ; Setup parameters for call to function aps_AddGroup
   \   0000A8   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000AA   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000AC   7914         MOV     R1,#0x14
   \   0000AE   12....       LCALL   ??aps_AddGroup?relay
    298          
    299          #if defined ( LCD_SUPPORTED )
    300            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B1                ; Setup parameters for call to function HalLcdWriteString
   \   0000B1   7901         MOV     R1,#0x1
   \   0000B3   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B5   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B7   12....       LCALL   ??HalLcdWriteString?relay
    301          #endif
    302          }
   \   0000BA   7F03         MOV     R7,#0x3
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000BF                REQUIRE P2SEL
   \   0000BF                REQUIRE P2DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A   22           RET
    303          
    304          /*********************************************************************
    305           * @fn      SampleApp_ProcessEvent
    306           *
    307           * @brief   Generic Application Task event processor.  This function
    308           *          is called to process all events for the task.  Events
    309           *          include timers, messages and any other user defined events.
    310           *
    311           * @param   task_id  - The OSAL assigned task ID.
    312           * @param   events - events to process.  This is a bit map and can
    313           *                   contain more than one event.
    314           *
    315           * @return  none
    316           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    317          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    318          {
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    319            afIncomingMSGPacket_t *MSGpkt;
    320            (void)task_id;  // Intentionally unreferenced parameter
    321          
    322            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    323            {
    324              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000015                ; Setup parameters for call to function osal_msg_receive
   \   000015   90....       MOV     DPTR,#SampleApp_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??osal_msg_receive?relay
   \   00001D   8A..         MOV     ?V0 + 0,R2
   \   00001F   8B..         MOV     ?V0 + 1,R3
    325              while ( MSGpkt )
   \   000021   EA           MOV     A,R2
   \   000022   45..         ORL     A,?V0 + 1
   \   000024   7003         JNZ     $+5
   \   000026   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    326              {
    327                switch ( MSGpkt->hdr.event )
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   14           DEC     A
   \   00002F   604A         JZ      ??SampleApp_ProcessEvent_1
   \   000031   24E7         ADD     A,#-0x19
   \   000033   601F         JZ      ??SampleApp_ProcessEvent_2
   \   000035   245A         ADD     A,#0x5a
   \   000037   6007         JZ      ??SampleApp_ProcessEvent_3
   \   000039   24EF         ADD     A,#-0x11
   \   00003B   601D         JZ      ??SampleApp_ProcessEvent_4
   \   00003D   02....       LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
    328                {
    329                  // Received when a key is pressed
    330                  case KEY_CHANGE:
    331                    //HalUARTWrite(0,"1\n",2);  // ·¢ËÍ´®¿ÚÏûÏ¢
    332                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
   \                     ??SampleApp_ProcessEvent_3:
   \   000040                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FA           MOV     R2,A
   \   000045   85..82       MOV     DPL,?V0 + 0
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   12....       LCALL   ??SampleApp_HandleKeys?relay
    333                    //open_led_1();
    334          		  break;
   \   000051   02....       LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
    335          
    336                  // Received when a messages is received (OTA) for this endpoint
    337                  case AF_INCOMING_MSG_CMD:   //½ÓÊÕµ½¿Õ¿Ú·¢¹ýÀ´µÄÏûÏ¢
    338                    SampleApp_MessageMSGCB( MSGpkt );
   \                     ??SampleApp_ProcessEvent_2:
   \   000054                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000054   12....       LCALL   ??SampleApp_MessageMSGCB?relay
    339                    break;
   \   000057   02....       LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
    340          
    341                  // Received whenever the device changes state in the network
    342                  case ZDO_STATE_CHANGE:
    343                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_4:
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   90....       MOV     DPTR,#SampleApp_NwkState
   \   00005F   F0           MOVX    @DPTR,A
    344                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    345                        || (SampleApp_NwkState == DEV_ROUTER)
    346                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000060   6409         XRL     A,#0x9
   \   000062   600D         JZ      ??SampleApp_ProcessEvent_6
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6407         XRL     A,#0x7
   \   000067   6008         JZ      ??SampleApp_ProcessEvent_6
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   6406         XRL     A,#0x6
   \   00006C   6003         JZ      $+5
   \   00006E   02....       LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
    347                    {
    348                      // Start sending the periodic message in a regular interval.
    349                      osal_start_timerEx( SampleApp_TaskID,
    350                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    351                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_6:
   \   000071                ; Setup parameters for call to function osal_start_timerEx
   \   000071   7C88         MOV     R4,#-0x78
   \   000073   7D13         MOV     R5,#0x13
   \   000075   12....       LCALL   ?Subroutine2 & 0xFFFF
    352                    }
   \                     ??CrossCallReturnLabel_41:
   \   000078   02....       LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
   \                     ??SampleApp_ProcessEvent_1:
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F5..         MOV     ?V0 + 4,A
    353                    else
    354                    {
    355                      // Device is no longer in the network
    356                    }
    357                    break;
    358          		case CMD_SERIAL_MSG: // ´®¿ÚÊÕµ½ÏûÏ¢#include "MT.h"
    359          		  uint8 len = ((mtOSALSerialData_t*)MSGpkt)->msg[0];  //´®¿ÚÏûÏ¢³¤¶È
                 		  ^
Warning[Pe1072]: a declaration cannot have a label
    360          		  uint8* msg = &(((mtOSALSerialData_t*)MSGpkt)->msg[1]);//´®¿ÚÏûÏ¢ÄÚÈÝ
   \   000083   A3           INC     DPTR
   \   000084   8582..       MOV     ?V0 + 2,DPL
   \   000087   8583..       MOV     ?V0 + 3,DPH
    361          		  afAddrType_t dstAddr;
    362          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type

        switch ( MSGpkt->hdr.event )
        ^
"C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",327  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "len" (declared at line 359 of "C:\Documents and
                      Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Samples\S
                      ampleApp\Source\SampleApp.c")
            variable "msg" (declared at line 360 of "C:\Documents and
                      Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Samples\S
                      ampleApp\Source\SampleApp.c")
            variable "ch" (declared at line 372 of "C:\Documents and
                      Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\¹âÃô\Projects\zstack\Samples\S
                      ampleApp\Source\SampleApp.c")
   \   00008A   7408         MOV     A,#0x8
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   7402         MOV     A,#0x2
   \   000091   F0           MOVX    @DPTR,A
    363          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000092   7409         MOV     A,#0x9
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   12....       LCALL   ?Subroutine18 & 0xFFFF
    364          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    365          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    366                                 SAMPLEAPP_MY_CLUSTERID,
    367                                 len,  // ÏûÏ¢³¤¶È
    368                                 (uint8*)msg, // ÏûÏ¢ÄÚÈÝ
    369                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    370                                 AF_DISCV_ROUTE,
    371                                 AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_29:
   \   00009A                ; Setup parameters for call to function AF_DataRequest
   \   00009A   75..1E       MOV     ?V0 + 5,#0x1e
   \   00009D   78..         MOV     R0,#?V0 + 5
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A2   75....       MOV     ?V0 + 6,#SampleApp_TransID & 0xff
   \   0000A5   75....       MOV     ?V0 + 7,#(SampleApp_TransID >> 8) & 0xff
   \   0000A8   78..         MOV     R0,#?V0 + 6
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   78..         MOV     R0,#?V0 + 2
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   75..00       MOV     ?V0 + 5,#0x0
   \   0000B5   78..         MOV     R0,#?V0 + 4
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   75..03       MOV     ?V0 + 4,#0x3
   \   0000BD   78..         MOV     R0,#?V0 + 4
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   7920         MOV     R1,#0x20
   \   0000C4   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000C6   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000C8   7409         MOV     A,#0x9
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
    372          		uint8* ch=msg;
    373                  JieQu(ch,3,1);
   \   0000D3   12....       LCALL   ?Subroutine1 & 0xFFFF
    374          		if(subch=='3')JieQu(ch,6,1);
   \                     ??CrossCallReturnLabel_51:
   \   0000D6   6433         XRL     A,#0x33
   \   0000D8   700C         JNZ     ??CrossCallReturnLabel_47
   \   0000DA   85..82       MOV     DPL,?V0 + 2
   \   0000DD   85..83       MOV     DPH,?V0 + 3
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   12....       LCALL   ??Subroutine22_0 & 0xFFFF
    375          		if(subch=='1')f=1;
   \                     ??CrossCallReturnLabel_47:
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   6431         XRL     A,#0x31
   \   0000E9   90....       MOV     DPTR,#f
   \   0000EC   7004         JNZ     ??SampleApp_ProcessEvent_7
   \   0000EE   7401         MOV     A,#0x1
   \   0000F0   8001         SJMP    ??SampleApp_ProcessEvent_8
    376          		else f=0;
   \                     ??SampleApp_ProcessEvent_7:
   \   0000F2   E4           CLR     A
   \                     ??SampleApp_ProcessEvent_8:
   \   0000F3   F0           MOVX    @DPTR,A
    377          		JieQu(ch,3,1);
   \   0000F4   12....       LCALL   ?Subroutine1 & 0xFFFF
    378          		if(subch=='4')s=0;
   \                     ??CrossCallReturnLabel_52:
   \   0000F7   6434         XRL     A,#0x34
   \   0000F9   701D         JNZ     ??SampleApp_ProcessEvent_9
   \   0000FB   90....       MOV     DPTR,#`s`
   \   0000FE   E4           CLR     A
   \   0000FF   F0           MOVX    @DPTR,A
    379          		else if (subch=='2'){
    380                  w[0]=1;
    381          		
    382          		  
    383          		  break;
    384                  default:
    385                    break;
    386                }
    387          
    388                // Release the memory
    389                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_10:
   \   000100                ; Setup parameters for call to function osal_msg_deallocate
   \   000100   AA..         MOV     R2,?V0 + 0
   \   000102   AB..         MOV     R3,?V0 + 1
   \   000104   12....       LCALL   ??osal_msg_deallocate?relay
    390          
    391                // Next - if one is available
    392                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000107                ; Setup parameters for call to function osal_msg_receive
   \   000107   90....       MOV     DPTR,#SampleApp_TaskID
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F9           MOV     R1,A
   \   00010C   12....       LCALL   ??osal_msg_receive?relay
    393              }
    394          
    395              // return unprocessed events
    396              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00010F   EE           MOV     A,R6
   \   000110   FA           MOV     R2,A
   \   000111   EF           MOV     A,R7
   \   000112   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_11:
   \   000114   FB           MOV     R3,A
   \   000115   02....       LJMP    ??SampleApp_ProcessEvent_12 & 0xFFFF
   \                     ??SampleApp_ProcessEvent_9:
   \   000118   E0           MOVX    A,@DPTR
   \   000119   6432         XRL     A,#0x32
   \   00011B   70E3         JNZ     ??SampleApp_ProcessEvent_10
   \   00011D   90....       MOV     DPTR,#w
   \   000120   7401         MOV     A,#0x1
   \   000122   F0           MOVX    @DPTR,A
   \   000123   80EA         SJMP    ??SampleApp_ProcessEvent_5
    397            }
    398            	}
    399          
    400            // Send a message out - This event is generated by a timer
    401            //  (setup in SampleApp_Init()).
    402            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000125   EE           MOV     A,R6
   \   000126   A2E0         MOV     C,0xE0 /* A   */.0
   \   000128   5018         JNC     ??SampleApp_ProcessEvent_13
    403            {
    404              // Send the periodic message
    405              SampleApp_SendPeriodicMessage();
   \   00012A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00012A   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    406          
    407              // Setup to send message again in normal period (+ a little jitter)
    408              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    409                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00012D                ; Setup parameters for call to function osal_rand
   \   00012D   12....       LCALL   ??osal_rand?relay
   \   000130                ; Setup parameters for call to function osal_start_timerEx
   \   000130   EA           MOV     A,R2
   \   000131   2488         ADD     A,#-0x78
   \   000133   FC           MOV     R4,A
   \   000134   E4           CLR     A
   \   000135   3413         ADDC    A,#0x13
   \   000137   FD           MOV     R5,A
   \   000138   12....       LCALL   ?Subroutine2 & 0xFFFF
    410          
    411              // return unprocessed events
    412              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_42:
   \   00013B   EE           MOV     A,R6
   \   00013C   6401         XRL     A,#0x1
   \                     ??SampleApp_ProcessEvent_14:
   \   00013E   FA           MOV     R2,A
   \   00013F   EF           MOV     A,R7
   \   000140   80D2         SJMP    ??SampleApp_ProcessEvent_11
    413            }
    414          
    415              if (events & MY_SEND_UART)  // ´®¿Ú·¢ËÍÏûÏ¢µÄÊÂ¼þ
   \                     ??SampleApp_ProcessEvent_13:
   \   000142   5402         ANL     A,#0x2
   \   000144   7003         JNZ     $+5
   \   000146   02....       LJMP    ??SampleApp_ProcessEvent_15 & 0xFFFF
    416            	{
    417            	//¶ÁÈ¡¹âÃôµç×è×´Ì¬£¬°µÊ±µãÁÁLED
    418                if(P2_0==0)
   \   000149   A2A0         MOV     C,0xa0.0
   \   00014B   5003         JNC     $+5
   \   00014D   02....       LJMP    ??SampleApp_ProcessEvent_16 & 0xFFFF
    419                  {
    420                  s=0;
   \   000150   90....       MOV     DPTR,#`s`
   \   000153   E4           CLR     A
   \   000154   F0           MOVX    @DPTR,A
    421          		T[0]='*';
   \   000155   12....       LCALL   ?Subroutine8 & 0xFFFF
    422            		T[1]='1';
    423            		T[2]='3';
    424            		T[3]='1';
    425            		T[4]='0';
    426           		T[5]='0';
    427            		T[6]='0';
    428            		T[7]='1';
    429            		T[8]='0';
   \                     ??CrossCallReturnLabel_15:
   \   000158   14           DEC     A
   \   000159   12....       LCALL   ?Subroutine12 & 0xFFFF
    430            		unsigned char  len = 16;
    431          		unsigned long  temp = 0; 
   \                     ??CrossCallReturnLabel_19:
   \   00015C   12....       LCALL   ?L_MOV_X
    432          		unsigned char  i;
    433          		unsigned char  *ptr=T;
   \   00015F   7C..         MOV     R4,#T & 0xff
   \   000161   7D..         MOV     R5,#(T >> 8) & 0xff
   \   000163   8049         SJMP    ??SampleApp_ProcessEvent_17
    434          
    435          		while(len--) 
    436          		{
    437          		for(i=0x80;i!=0;i=i>>1)
   \                     ??SampleApp_ProcessEvent_18:
   \   000165   7980         MOV     R1,#-0x80
    438          		 {
    439          			  temp = temp * 2;
   \                     ??SampleApp_ProcessEvent_19:
   \   000167   7401         MOV     A,#0x1
   \   000169   78..         MOV     R0,#?V0 + 0
   \   00016B   12....       LCALL   ?L_SHL
    440          			  if((temp & 0x10000) != 0)
   \   00016E   85....       MOV     ?V0 + 4,?V0 + 0
   \   000171   85....       MOV     ?V0 + 5,?V0 + 1
   \   000174   85....       MOV     ?V0 + 6,?V0 + 2
   \   000177   85....       MOV     ?V0 + 7,?V0 + 3
   \   00017A   90....       MOV     DPTR,#__Constant_10000
   \   00017D   78..         MOV     R0,#?V0 + 4
   \   00017F   12....       LCALL   ?L_AND_X
   \   000182   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000185   6008         JZ      ??SampleApp_ProcessEvent_20
    441          			  temp = temp ^ 0x11021;
   \   000187   90....       MOV     DPTR,#__Constant_11021
   \   00018A   78..         MOV     R0,#?V0 + 0
   \   00018C   12....       LCALL   ?L_XOR_X
    442          			  if((*ptr & i) != 0)
   \                     ??SampleApp_ProcessEvent_20:
   \   00018F   8C82         MOV     DPL,R4
   \   000191   8D83         MOV     DPH,R5
   \   000193   E0           MOVX    A,@DPTR
   \   000194   59           ANL     A,R1
   \   000195   6008         JZ      ??SampleApp_ProcessEvent_21
    443          			  temp = temp ^ (0x10000 ^ 0x11021);
   \   000197   90....       MOV     DPTR,#__Constant_1021
   \   00019A   78..         MOV     R0,#?V0 + 0
   \   00019C   12....       LCALL   ?L_XOR_X
    444          		 }
   \                     ??SampleApp_ProcessEvent_21:
   \   00019F   E9           MOV     A,R1
   \   0001A0   C3           CLR     C
   \   0001A1   13           RRC     A
   \   0001A2   F9           MOV     R1,A
   \   0001A3   70C2         JNZ     ??SampleApp_ProcessEvent_19
    445          	
    446          		 ptr++;
   \   0001A5   8C82         MOV     DPL,R4
   \   0001A7   8D83         MOV     DPH,R5
   \   0001A9   A3           INC     DPTR
   \   0001AA   AC82         MOV     R4,DPL
   \   0001AC   AD83         MOV     R5,DPH
    447          		}
   \                     ??SampleApp_ProcessEvent_17:
   \   0001AE   8A..         MOV     ?V0 + 12,R2
   \   0001B0   74FF         MOV     A,#-0x1
   \   0001B2   25..         ADD     A,?V0 + 12
   \   0001B4   1A           DEC     R2
   \   0001B5   04           INC     A
   \   0001B6   70AD         JNZ     ??SampleApp_ProcessEvent_18
    448          		jiaoyan= temp%10;
   \   0001B8   90....       MOV     DPTR,#__Constant_a
   \   0001BB   78..         MOV     R0,#?V0 + 4
   \   0001BD   12....       LCALL   ?L_MOV_X
   \   0001C0   78..         MOV     R0,#?V0 + 0
   \   0001C2   79..         MOV     R1,#?V0 + 4
   \   0001C4   12....       LCALL   ?UL_DIV_MOD
   \   0001C7   90....       MOV     DPTR,#jiaoyan
   \   0001CA   78..         MOV     R0,#?V0 + 4
   \   0001CC   12....       LCALL   ?L_MOV_TO_X
    449          		T[9]=jiaoyan/1000+48;
   \   0001CF   90....       MOV     DPTR,#jiaoyan
   \   0001D2   78..         MOV     R0,#?V0 + 0
   \   0001D4   12....       LCALL   ?L_MOV_X
   \   0001D7   90....       MOV     DPTR,#__Constant_3e8
   \   0001DA   78..         MOV     R0,#?V0 + 4
   \   0001DC   12....       LCALL   ?L_MOV_X
   \   0001DF   78..         MOV     R0,#?V0 + 0
   \   0001E1   79..         MOV     R1,#?V0 + 4
   \   0001E3   12....       LCALL   ?UL_DIV_MOD
   \   0001E6   12....       LCALL   ?Subroutine9 & 0xFFFF
    450              	T[10]=(jiaoyan/100)%10+48;
   \                     ??CrossCallReturnLabel_61:
   \   0001E9   12....       LCALL   ?L_MOV_X
   \   0001EC   90....       MOV     DPTR,#__Constant_64
   \   0001EF   78..         MOV     R0,#?V0 + 0
   \   0001F1   12....       LCALL   ?L_MOV_X
   \   0001F4   78..         MOV     R0,#?V0 + 4
   \   0001F6   79..         MOV     R1,#?V0 + 0
   \   0001F8   12....       LCALL   ?UL_DIV_MOD
   \   0001FB   90....       MOV     DPTR,#__Constant_a
   \   0001FE   78..         MOV     R0,#?V0 + 0
   \   000200   12....       LCALL   ?L_MOV_X
   \   000203   78..         MOV     R0,#?V0 + 4
   \   000205   79..         MOV     R1,#?V0 + 0
   \   000207   12....       LCALL   ?UL_DIV_MOD
   \   00020A   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00020D   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    451              	T[11]=(jiaoyan/10)%10+48;
   \                     ??CrossCallReturnLabel_63:
   \   000210   12....       LCALL   ?L_MOV_X
   \   000213   90....       MOV     DPTR,#__Constant_a
   \   000216   78..         MOV     R0,#?V0 + 0
   \   000218   12....       LCALL   ?L_MOV_X
   \   00021B   78..         MOV     R0,#?V0 + 4
   \   00021D   79..         MOV     R1,#?V0 + 0
   \   00021F   12....       LCALL   ?UL_DIV_MOD
   \   000222   90....       MOV     DPTR,#__Constant_a
   \   000225   78..         MOV     R0,#?V0 + 0
   \   000227   12....       LCALL   ?L_MOV_X
   \   00022A   78..         MOV     R0,#?V0 + 4
   \   00022C   79..         MOV     R1,#?V0 + 0
   \   00022E   12....       LCALL   ?UL_DIV_MOD
   \   000231   E5..         MOV     A,?V0 + 0
   \   000233   2430         ADD     A,#0x30
   \   000235   90....       MOV     DPTR,#T + 11
   \   000238   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    452              	T[12]=jiaoyan%10+48;
   \                     ??CrossCallReturnLabel_64:
   \   00023B   12....       LCALL   ?L_MOV_X
   \   00023E   90....       MOV     DPTR,#__Constant_a
   \   000241   78..         MOV     R0,#?V0 + 0
   \   000243   12....       LCALL   ?L_MOV_X
   \   000246   78..         MOV     R0,#?V0 + 4
   \   000248   79..         MOV     R1,#?V0 + 0
   \   00024A   12....       LCALL   ?UL_DIV_MOD
   \   00024D   12....       LCALL   ?Subroutine7 & 0xFFFF
    453          		HalUARTWrite(0,"\n",1);
    454          		//SendKongkouInfor(T);
    455          		afAddrType_t dstAddr;
    456          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??CrossCallReturnLabel_12:
   \   000250   12....       LCALL   ?XSTACK_DISP0_8
   \   000253   7402         MOV     A,#0x2
   \   000255   F0           MOVX    @DPTR,A
    457          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000256   7409         MOV     A,#0x9
   \   000258   12....       LCALL   ?XSTACK_DISP0_8
   \   00025B   12....       LCALL   ?Subroutine5 & 0xFFFF
    458          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    459          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    460                                 SAMPLEAPP_MY_CLUSTERID,
    461                                 13,  // ÏûÏ¢³¤¶È
    462                                 T, // ÏûÏ¢ÄÚÈÝ
    463                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    464                                 AF_DISCV_ROUTE,
    465                                 AF_DEFAULT_RADIUS );	
   \                     ??CrossCallReturnLabel_6:
   \   00025E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000261   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000264   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000267   78..         MOV     R0,#?V0 + 0
   \   000269   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026C   75....       MOV     ?V0 + 0,#T & 0xff
   \   00026F   75....       MOV     ?V0 + 1,#(T >> 8) & 0xff
   \   000272   78..         MOV     R0,#?V0 + 0
   \   000274   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000277   75..0D       MOV     ?V0 + 0,#0xd
   \   00027A   75..00       MOV     ?V0 + 1,#0x0
   \   00027D   78..         MOV     R0,#?V0 + 0
   \   00027F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000282   75..03       MOV     ?V0 + 0,#0x3
   \   000285   78..         MOV     R0,#?V0 + 0
   \   000287   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00028A   7920         MOV     R1,#0x20
   \   00028C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00028E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000290   7409         MOV     A,#0x9
   \   000292   12....       LCALL   ?XSTACK_DISP0_8
   \   000295   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000298   12....       LCALL   ?DEALLOC_XSTACK8
    466          		HalUARTWrite(0,T,13);
   \   00029B                ; Setup parameters for call to function HalUARTWrite
   \   00029B   7C0D         MOV     R4,#0xd
   \   00029D   7D00         MOV     R5,#0x0
   \   00029F   7A..         MOV     R2,#T & 0xff
   \   0002A1   7B..         MOV     R3,#(T >> 8) & 0xff
   \   0002A3   7900         MOV     R1,#0x0
   \   0002A5   12....       LCALL   ??HalUARTWrite?relay
    467          		if(w[0]==2)w[0]=0;
   \   0002A8   90....       MOV     DPTR,#w
   \   0002AB   E0           MOVX    A,@DPTR
   \   0002AC   6402         XRL     A,#0x2
   \   0002AE   6003         JZ      $+5
   \   0002B0   02....       LJMP    ??SampleApp_ProcessEvent_22 & 0xFFFF
   \   0002B3   E4           CLR     A
   \   0002B4   02....       LJMP    ??SampleApp_ProcessEvent_23 & 0xFFFF
    468          		
    469                    	}
    470          		  //HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);
    471                else
    472                  {
    473                  
    474          		T[0]='*';
   \                     ??SampleApp_ProcessEvent_16:
   \   0002B7   12....       LCALL   ?Subroutine8 & 0xFFFF
    475            		T[1]='1';
    476            		T[2]='3';
    477            		T[3]='1';
    478            		T[4]='0';
    479           		T[5]='0';
    480            		T[6]='0';
    481            		T[7]='1';
    482            		T[8]='1';
   \                     ??CrossCallReturnLabel_16:
   \   0002BA   12....       LCALL   ?Subroutine12 & 0xFFFF
    483            		unsigned char  len = 16;
    484          		unsigned long  temp = 0; 
   \                     ??CrossCallReturnLabel_20:
   \   0002BD   12....       LCALL   ?L_MOV_X
    485          		unsigned char  i;
    486          		unsigned char  *ptr=T;
   \   0002C0   7C..         MOV     R4,#T & 0xff
   \   0002C2   7D..         MOV     R5,#(T >> 8) & 0xff
   \   0002C4   8049         SJMP    ??SampleApp_ProcessEvent_24
    487          
    488          	while(len--) 
    489          		{
    490          		for(i=0x80;i!=0;i=i>>1)
   \                     ??SampleApp_ProcessEvent_25:
   \   0002C6   7980         MOV     R1,#-0x80
    491          		 {
    492          			  temp = temp * 2;
   \                     ??SampleApp_ProcessEvent_26:
   \   0002C8   7401         MOV     A,#0x1
   \   0002CA   78..         MOV     R0,#?V0 + 0
   \   0002CC   12....       LCALL   ?L_SHL
    493          			  if((temp & 0x10000) != 0)
   \   0002CF   85....       MOV     ?V0 + 4,?V0 + 0
   \   0002D2   85....       MOV     ?V0 + 5,?V0 + 1
   \   0002D5   85....       MOV     ?V0 + 6,?V0 + 2
   \   0002D8   85....       MOV     ?V0 + 7,?V0 + 3
   \   0002DB   90....       MOV     DPTR,#__Constant_10000
   \   0002DE   78..         MOV     R0,#?V0 + 4
   \   0002E0   12....       LCALL   ?L_AND_X
   \   0002E3   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0002E6   6008         JZ      ??SampleApp_ProcessEvent_27
    494          			  temp = temp ^ 0x11021;
   \   0002E8   90....       MOV     DPTR,#__Constant_11021
   \   0002EB   78..         MOV     R0,#?V0 + 0
   \   0002ED   12....       LCALL   ?L_XOR_X
    495          			  if((*ptr & i) != 0)
   \                     ??SampleApp_ProcessEvent_27:
   \   0002F0   8C82         MOV     DPL,R4
   \   0002F2   8D83         MOV     DPH,R5
   \   0002F4   E0           MOVX    A,@DPTR
   \   0002F5   59           ANL     A,R1
   \   0002F6   6008         JZ      ??SampleApp_ProcessEvent_28
    496          			  temp = temp ^ (0x10000 ^ 0x11021);
   \   0002F8   90....       MOV     DPTR,#__Constant_1021
   \   0002FB   78..         MOV     R0,#?V0 + 0
   \   0002FD   12....       LCALL   ?L_XOR_X
    497          		 }
   \                     ??SampleApp_ProcessEvent_28:
   \   000300   E9           MOV     A,R1
   \   000301   C3           CLR     C
   \   000302   13           RRC     A
   \   000303   F9           MOV     R1,A
   \   000304   70C2         JNZ     ??SampleApp_ProcessEvent_26
    498          	
    499          		 ptr++;
   \   000306   8C82         MOV     DPL,R4
   \   000308   8D83         MOV     DPH,R5
   \   00030A   A3           INC     DPTR
   \   00030B   AC82         MOV     R4,DPL
   \   00030D   AD83         MOV     R5,DPH
    500          		}
   \                     ??SampleApp_ProcessEvent_24:
   \   00030F   8A..         MOV     ?V0 + 4,R2
   \   000311   74FF         MOV     A,#-0x1
   \   000313   25..         ADD     A,?V0 + 4
   \   000315   1A           DEC     R2
   \   000316   04           INC     A
   \   000317   70AD         JNZ     ??SampleApp_ProcessEvent_25
    501          		jiaoyan= temp%10;
   \   000319   85....       MOV     ?V0 + 8,?V0 + 0
   \   00031C   85....       MOV     ?V0 + 9,?V0 + 1
   \   00031F   85....       MOV     ?V0 + 10,?V0 + 2
   \   000322   85....       MOV     ?V0 + 11,?V0 + 3
   \   000325   90....       MOV     DPTR,#__Constant_a
   \   000328   78..         MOV     R0,#?V0 + 0
   \   00032A   12....       LCALL   ?L_MOV_X
   \   00032D   78..         MOV     R0,#?V0 + 8
   \   00032F   79..         MOV     R1,#?V0 + 0
   \   000331   12....       LCALL   ?UL_DIV_MOD
   \   000334   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000337   F0           MOVX    @DPTR,A
    502          	T[9]=jiaoyan/1000+48;
   \   000338   90....       MOV     DPTR,#jiaoyan
   \   00033B   78..         MOV     R0,#?V0 + 8
   \   00033D   12....       LCALL   ?L_MOV_X
   \   000340   90....       MOV     DPTR,#__Constant_3e8
   \   000343   78..         MOV     R0,#?V0 + 0
   \   000345   12....       LCALL   ?L_MOV_X
   \   000348   78..         MOV     R0,#?V0 + 8
   \   00034A   79..         MOV     R1,#?V0 + 0
   \   00034C   12....       LCALL   ?UL_DIV_MOD
   \   00034F   E5..         MOV     A,?V0 + 8
   \   000351   12....       LCALL   ?Subroutine11 & 0xFFFF
    503              T[10]=(jiaoyan/100)%10+48;
   \                     ??CrossCallReturnLabel_57:
   \   000354   12....       LCALL   ?L_MOV_X
   \   000357   90....       MOV     DPTR,#__Constant_64
   \   00035A   78..         MOV     R0,#?V0 + 8
   \   00035C   12....       LCALL   ?L_MOV_X
   \   00035F   78..         MOV     R0,#?V0 + 0
   \   000361   79..         MOV     R1,#?V0 + 8
   \   000363   12....       LCALL   ?UL_DIV_MOD
   \   000366   90....       MOV     DPTR,#__Constant_a
   \   000369   78..         MOV     R0,#?V0 + 8
   \   00036B   12....       LCALL   ?L_MOV_X
   \   00036E   78..         MOV     R0,#?V0 + 0
   \   000370   79..         MOV     R1,#?V0 + 8
   \   000372   12....       LCALL   ?UL_DIV_MOD
   \   000375   E5..         MOV     A,?V0 + 8
   \   000377   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00037A   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    504              T[11]=(jiaoyan/10)%10+48;
   \                     ??CrossCallReturnLabel_59:
   \   00037D   12....       LCALL   ?L_MOV_X
   \   000380   90....       MOV     DPTR,#__Constant_a
   \   000383   78..         MOV     R0,#?V0 + 8
   \   000385   12....       LCALL   ?L_MOV_X
   \   000388   78..         MOV     R0,#?V0 + 0
   \   00038A   79..         MOV     R1,#?V0 + 8
   \   00038C   12....       LCALL   ?UL_DIV_MOD
   \   00038F   90....       MOV     DPTR,#__Constant_a
   \   000392   78..         MOV     R0,#?V0 + 8
   \   000394   12....       LCALL   ?L_MOV_X
   \   000397   78..         MOV     R0,#?V0 + 0
   \   000399   79..         MOV     R1,#?V0 + 8
   \   00039B   12....       LCALL   ?UL_DIV_MOD
   \   00039E   E5..         MOV     A,?V0 + 8
   \   0003A0   2430         ADD     A,#0x30
   \   0003A2   90....       MOV     DPTR,#T + 11
   \   0003A5   F0           MOVX    @DPTR,A
    505              T[12]=jiaoyan%10+48;
   \   0003A6   90....       MOV     DPTR,#jiaoyan
   \   0003A9   78..         MOV     R0,#?V0 + 8
   \   0003AB   12....       LCALL   ?L_MOV_X
   \   0003AE   90....       MOV     DPTR,#__Constant_a
   \   0003B1   78..         MOV     R0,#?V0 + 0
   \   0003B3   12....       LCALL   ?L_MOV_X
   \   0003B6   78..         MOV     R0,#?V0 + 8
   \   0003B8   79..         MOV     R1,#?V0 + 0
   \   0003BA   12....       LCALL   ?UL_DIV_MOD
   \   0003BD   12....       LCALL   ?Subroutine7 & 0xFFFF
    506          	HalUARTWrite(0,"\n",1);
    507          	//SendKongkouInfor(T);
    508          	afAddrType_t dstAddr;
    509          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??CrossCallReturnLabel_13:
   \   0003C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C3   7402         MOV     A,#0x2
   \   0003C5   F0           MOVX    @DPTR,A
    510          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   0003C6   7409         MOV     A,#0x9
   \   0003C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CB   12....       LCALL   ?Subroutine5 & 0xFFFF
    511          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    512          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    513                                 SAMPLEAPP_MY_CLUSTERID,
    514                                 13,  // ÏûÏ¢³¤¶È
    515                                 T, // ÏûÏ¢ÄÚÈÝ
    516                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    517                                 AF_DISCV_ROUTE,
    518                                 AF_DEFAULT_RADIUS );	
   \                     ??CrossCallReturnLabel_7:
   \   0003CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003D1   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0003D4   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0003D7   78..         MOV     R0,#?V0 + 0
   \   0003D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003DC   75....       MOV     ?V0 + 0,#T & 0xff
   \   0003DF   75....       MOV     ?V0 + 1,#(T >> 8) & 0xff
   \   0003E2   78..         MOV     R0,#?V0 + 0
   \   0003E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003E7   75..0D       MOV     ?V0 + 0,#0xd
   \   0003EA   75..00       MOV     ?V0 + 1,#0x0
   \   0003ED   78..         MOV     R0,#?V0 + 0
   \   0003EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003F2   75..03       MOV     ?V0 + 0,#0x3
   \   0003F5   78..         MOV     R0,#?V0 + 0
   \   0003F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003FA   7920         MOV     R1,#0x20
   \   0003FC   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0003FE   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000400   7409         MOV     A,#0x9
   \   000402   12....       LCALL   ?XSTACK_DISP0_8
   \   000405   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000408   12....       LCALL   ?DEALLOC_XSTACK8
    519          	HalUARTWrite(0,T,13);
   \   00040B                ; Setup parameters for call to function HalUARTWrite
   \   00040B   7C0D         MOV     R4,#0xd
   \   00040D   7D00         MOV     R5,#0x0
   \   00040F   7A..         MOV     R2,#T & 0xff
   \   000411   7B..         MOV     R3,#(T >> 8) & 0xff
   \   000413   7900         MOV     R1,#0x0
   \   000415   12....       LCALL   ??HalUARTWrite?relay
    520          	w[0]=2;
   \   000418   90....       MOV     DPTR,#w
   \   00041B   7402         MOV     A,#0x2
   \                     ??SampleApp_ProcessEvent_23:
   \   00041D   F0           MOVX    @DPTR,A
    521               }
    522          		osal_start_timerEx (SampleApp_TaskID, MY_SEND_UART, 1000); //5s¶¨Ê±Æ÷
   \                     ??SampleApp_ProcessEvent_22:
   \   00041E                ; Setup parameters for call to function osal_start_timerEx
   \   00041E   7CE8         MOV     R4,#-0x18
   \   000420   7D03         MOV     R5,#0x3
   \   000422   7A02         MOV     R2,#0x2
   \   000424   12....       LCALL   ??Subroutine21_0 & 0xFFFF
    523                    
    524          		  return (events ^ MY_SEND_UART);
   \                     ??CrossCallReturnLabel_43:
   \   000427   EE           MOV     A,R6
   \   000428   6402         XRL     A,#0x2
   \   00042A   02....       LJMP    ??SampleApp_ProcessEvent_14 & 0xFFFF
    525            	}
    526          	if (events & MY_SEND2_UART)  
   \                     ??SampleApp_ProcessEvent_15:
   \   00042D   EE           MOV     A,R6
   \   00042E   5404         ANL     A,#0x4
   \   000430   604F         JZ      ??CrossCallReturnLabel_44
    527            	{
    528          		//HalUARTWrite(0,"a",1);
    529          
    530          	 if(f==1)
   \   000432   90....       MOV     DPTR,#f
   \   000435   E0           MOVX    A,@DPTR
   \   000436   6401         XRL     A,#0x1
   \   000438   7014         JNZ     ??SampleApp_ProcessEvent_29
    531               	{
    532                  e=!e;
   \   00043A   90....       MOV     DPTR,#e
   \   00043D   E0           MOVX    A,@DPTR
   \   00043E   7004         JNZ     ??SampleApp_ProcessEvent_30
   \   000440   7401         MOV     A,#0x1
   \   000442   8001         SJMP    ??SampleApp_ProcessEvent_31
   \                     ??SampleApp_ProcessEvent_30:
   \   000444   E4           CLR     A
   \                     ??SampleApp_ProcessEvent_31:
   \   000445   F0           MOVX    @DPTR,A
    533          		if(e){
   \   000446   A2E0         MOV     C,0xE0 /* A   */.0
   \   000448   5004         JNC     ??SampleApp_ProcessEvent_29
    534                       HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);
   \   00044A                ; Setup parameters for call to function HalLedSet
   \   00044A   7A01         MOV     R2,#0x1
   \   00044C   8002         SJMP    ??SampleApp_ProcessEvent_32
    535          			 }
    536          		else HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
   \                     ??SampleApp_ProcessEvent_29:
   \   00044E                ; Setup parameters for call to function HalLedSet
   \   00044E   7A00         MOV     R2,#0x0
   \                     ??SampleApp_ProcessEvent_32:
   \   000450   7901         MOV     R1,#0x1
   \   000452   12....       LCALL   ??HalLedSet?relay
    537          	 	}
    538          	 else HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
    539          	 if(s==1)
   \   000455   90....       MOV     DPTR,#`s`
   \   000458   E0           MOVX    A,@DPTR
   \   000459   6401         XRL     A,#0x1
   \   00045B   7014         JNZ     ??SampleApp_ProcessEvent_33
    540               	{
    541                  r=!r;
   \   00045D   90....       MOV     DPTR,#r
   \   000460   E0           MOVX    A,@DPTR
   \   000461   7004         JNZ     ??SampleApp_ProcessEvent_34
   \   000463   7401         MOV     A,#0x1
   \   000465   8001         SJMP    ??SampleApp_ProcessEvent_35
   \                     ??SampleApp_ProcessEvent_34:
   \   000467   E4           CLR     A
   \                     ??SampleApp_ProcessEvent_35:
   \   000468   F0           MOVX    @DPTR,A
    542          		if(r){
   \   000469   A2E0         MOV     C,0xE0 /* A   */.0
   \   00046B   5004         JNC     ??SampleApp_ProcessEvent_33
    543                       HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
   \   00046D                ; Setup parameters for call to function HalLedSet
   \   00046D   7A01         MOV     R2,#0x1
   \   00046F   8002         SJMP    ??SampleApp_ProcessEvent_36
    544          			 }
    545          		else HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
   \                     ??SampleApp_ProcessEvent_33:
   \   000471                ; Setup parameters for call to function HalLedSet
   \   000471   7A00         MOV     R2,#0x0
   \                     ??SampleApp_ProcessEvent_36:
   \   000473   7902         MOV     R1,#0x2
   \   000475   12....       LCALL   ??HalLedSet?relay
    546          	 	}
    547          	 else HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
    548          	 osal_start_timerEx (SampleApp_TaskID, MY_SEND2_UART, 1000);
   \   000478                ; Setup parameters for call to function osal_start_timerEx
   \   000478   7CE8         MOV     R4,#-0x18
   \   00047A   7D03         MOV     R5,#0x3
   \   00047C   7A04         MOV     R2,#0x4
   \   00047E   12....       LCALL   ??Subroutine21_0 & 0xFFFF
    549          	}
    550          	if (events & MY_SEND3_UART)  
   \                     ??CrossCallReturnLabel_44:
   \   000481   EE           MOV     A,R6
   \   000482   5408         ANL     A,#0x8
   \   000484   602C         JZ      ??CrossCallReturnLabel_45
    551          		{
    552          		 
    553          		    if(w[0]==1){
   \   000486   90....       MOV     DPTR,#w
   \   000489   E0           MOVX    A,@DPTR
   \   00048A   6401         XRL     A,#0x1
   \   00048C   701B         JNZ     ??SampleApp_ProcessEvent_37
    554          			z=!z;
   \   00048E   90....       MOV     DPTR,#z
   \   000491   E0           MOVX    A,@DPTR
   \   000492   7004         JNZ     ??SampleApp_ProcessEvent_38
   \   000494   7401         MOV     A,#0x1
   \   000496   8001         SJMP    ??SampleApp_ProcessEvent_39
   \                     ??SampleApp_ProcessEvent_38:
   \   000498   E4           CLR     A
   \                     ??SampleApp_ProcessEvent_39:
   \   000499   F0           MOVX    @DPTR,A
    555          			if(z){
   \   00049A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00049C   5004         JNC     ??SampleApp_ProcessEvent_40
    556          				 HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
   \   00049E                ; Setup parameters for call to function HalLedSet
   \   00049E   7A01         MOV     R2,#0x1
   \   0004A0   8002         SJMP    ??SampleApp_ProcessEvent_41
    557          				 }
    558          			else HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
   \                     ??SampleApp_ProcessEvent_40:
   \   0004A2                ; Setup parameters for call to function HalLedSet
   \   0004A2   7A00         MOV     R2,#0x0
   \                     ??SampleApp_ProcessEvent_41:
   \   0004A4   7902         MOV     R1,#0x2
   \   0004A6   12....       LCALL   ??HalLedSet?relay
    559          			}
    560          			
    561          		 osal_start_timerEx (SampleApp_TaskID, MY_SEND3_UART, 500);
   \                     ??SampleApp_ProcessEvent_37:
   \   0004A9                ; Setup parameters for call to function osal_start_timerEx
   \   0004A9   7CF4         MOV     R4,#-0xc
   \   0004AB   7D01         MOV     R5,#0x1
   \   0004AD   7A08         MOV     R2,#0x8
   \   0004AF   12....       LCALL   ??Subroutine21_0 & 0xFFFF
    562          		}
    563          
    564            // Discard unknown events
    565            return 0;
   \                     ??CrossCallReturnLabel_45:
   \   0004B2   7A00         MOV     R2,#0x0
   \   0004B4   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_12:
   \   0004B6   740C         MOV     A,#0xc
   \   0004B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004BB   7F0D         MOV     R7,#0xd
   \   0004BD   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0004C0                REQUIRE _A_P2
    566          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   7A10         MOV     R2,#0x10
   \   000003   90....       MOV     DPTR,#__Constant_0
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   7431         MOV     A,#0x31
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   14           DEC     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   04           INC     A
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7A01         MOV     R2,#0x1
   \   000002                REQUIRE ??Subroutine21_0
   \   000002                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002                REQUIRE ??Subroutine24_0
   \   000002                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   2430         ADD     A,#0x30
   \   000002   90....       MOV     DPTR,#T + 10
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   45..         ORL     A,?V0 + 5
   \   000004   45..         ORL     A,?V0 + 6
   \   000006   45..         ORL     A,?V0 + 7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   2430         ADD     A,#0x30
   \   000002   90....       MOV     DPTR,#T + 9
   \   000005                REQUIRE ??Subroutine25_0
   \   000005                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#jiaoyan
   \   000004   78..         MOV     R0,#?V0 + 0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#jiaoyan
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E5..         MOV     A,?V0 + 2
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   E5..         MOV     A,?V0 + 3
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2430         ADD     A,#0x30
   \   000004   90....       MOV     DPTR,#T + 9
   \   000007                REQUIRE ??Subroutine26_0
   \   000007                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#jiaoyan
   \   000004   78..         MOV     R0,#?V0 + 4
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2430         ADD     A,#0x30
   \   000004   90....       MOV     DPTR,#T + 12
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function HalUARTWrite
   \   000008                ; Setup parameters for call to function HalUARTWrite
   \   000008                ; Setup parameters for call to function HalUARTWrite
   \   000008   7C01         MOV     R4,#0x1
   \   00000A   7D00         MOV     R5,#0x0
   \   00000C   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00000E   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   ??HalUARTWrite?relay
   \   000015   7408         MOV     A,#0x8
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#T
   \   000003   742A         MOV     A,#0x2a
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   7431         MOV     A,#0x31
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7433         MOV     A,#0x33
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005                ; Setup parameters for call to function HalLedBlink
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET
    567          
    568          
    569          /*********************************************************************
    570           * Event Generation Functions
    571           */
    572          /*********************************************************************
    573           * @fn      SampleApp_HandleKeys
    574           *
    575           * @brief   Handles all key events for this device.
    576           *
    577           * @param   shift - true if in shift/alt.
    578           * @param   keys - bit field for key events. Valid entries:
    579           *                 HAL_KEY_SW_2
    580           *                 HAL_KEY_SW_1
    581           *
    582           * @return  none
    583           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    584          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    585          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 8,R2
    586            (void)shift;  // Intentionally unreferenced parameter
    587            
    588            if ( keys & HAL_KEY_SW_7 )
   \   00000C   EA           MOV     A,R2
   \   00000D   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000F   4003         JC      $+5
   \   000011   02....       LJMP    ??SampleApp_HandleKeys_0 & 0xFFFF
    589            {
    590          
    591            if(w[0]==2){
   \   000014   90....       MOV     DPTR,#w
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6402         XRL     A,#0x2
   \   00001A   6003         JZ      $+5
   \   00001C   02....       LJMP    ??SampleApp_HandleKeys_0 & 0xFFFF
    592            if(s==0)
   \   00001F   90....       MOV     DPTR,#`s`
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6003         JZ      $+5
   \   000025   02....       LJMP    ??SampleApp_HandleKeys_1 & 0xFFFF
    593            {s=1;
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?Subroutine6 & 0xFFFF
    594            T[0]='*';
    595            T[1]='1';
    596            T[2]='3';
    597            T[3]='4';
    598            T[4]='0';
    599            T[5]='0';
    600            T[6]='0';
    601            T[7]='0';
    602            T[8]='0';
   \                     ??CrossCallReturnLabel_10:
   \   00002D   12....       LCALL   ?Subroutine13 & 0xFFFF
    603            unsigned char  len = 16;
    604            unsigned long  temp = 0; 
   \                     ??CrossCallReturnLabel_21:
   \   000030   12....       LCALL   ?L_MOV_X
    605            unsigned char  i;
    606            unsigned char  *ptr=T;
   \   000033   7C..         MOV     R4,#T & 0xff
   \   000035   7D..         MOV     R5,#(T >> 8) & 0xff
   \   000037   8049         SJMP    ??SampleApp_HandleKeys_2
    607          
    608          	while(len--) 
    609          	{
    610          	for(i=0x80;i!=0;i=i>>1)
   \                     ??SampleApp_HandleKeys_3:
   \   000039   7A80         MOV     R2,#-0x80
    611          	{
    612          		temp = temp * 2;
   \                     ??SampleApp_HandleKeys_4:
   \   00003B   7401         MOV     A,#0x1
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?L_SHL
    613          		if((temp & 0x10000) != 0)
   \   000042   85....       MOV     ?V0 + 4,?V0 + 0
   \   000045   85....       MOV     ?V0 + 5,?V0 + 1
   \   000048   85....       MOV     ?V0 + 6,?V0 + 2
   \   00004B   85....       MOV     ?V0 + 7,?V0 + 3
   \   00004E   90....       MOV     DPTR,#__Constant_10000
   \   000051   78..         MOV     R0,#?V0 + 4
   \   000053   12....       LCALL   ?L_AND_X
   \   000056   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000059   6008         JZ      ??SampleApp_HandleKeys_5
    614          		temp = temp ^ 0x11021;
   \   00005B   90....       MOV     DPTR,#__Constant_11021
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?L_XOR_X
    615          		if((*ptr & i) != 0)
   \                     ??SampleApp_HandleKeys_5:
   \   000063   8C82         MOV     DPL,R4
   \   000065   8D83         MOV     DPH,R5
   \   000067   E0           MOVX    A,@DPTR
   \   000068   5A           ANL     A,R2
   \   000069   6008         JZ      ??SampleApp_HandleKeys_6
    616          			  temp = temp ^ (0x10000 ^ 0x11021);
   \   00006B   90....       MOV     DPTR,#__Constant_1021
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   12....       LCALL   ?L_XOR_X
    617          		 }
   \                     ??SampleApp_HandleKeys_6:
   \   000073   EA           MOV     A,R2
   \   000074   C3           CLR     C
   \   000075   13           RRC     A
   \   000076   FA           MOV     R2,A
   \   000077   70C2         JNZ     ??SampleApp_HandleKeys_4
    618          	
    619          		 ptr++;
   \   000079   8C82         MOV     DPL,R4
   \   00007B   8D83         MOV     DPH,R5
   \   00007D   A3           INC     DPTR
   \   00007E   AC82         MOV     R4,DPL
   \   000080   AD83         MOV     R5,DPH
    620          		}
   \                     ??SampleApp_HandleKeys_2:
   \   000082   E9           MOV     A,R1
   \   000083   FE           MOV     R6,A
   \   000084   74FF         MOV     A,#-0x1
   \   000086   2E           ADD     A,R6
   \   000087   19           DEC     R1
   \   000088   04           INC     A
   \   000089   70AE         JNZ     ??SampleApp_HandleKeys_3
    621            jiaoyan= temp%10;
   \   00008B   90....       MOV     DPTR,#__Constant_a
   \   00008E   78..         MOV     R0,#?V0 + 4
   \   000090   12....       LCALL   ?L_MOV_X
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   79..         MOV     R1,#?V0 + 4
   \   000097   12....       LCALL   ?UL_DIV_MOD
   \   00009A   90....       MOV     DPTR,#jiaoyan
   \   00009D   78..         MOV     R0,#?V0 + 4
   \   00009F   12....       LCALL   ?L_MOV_TO_X
    622            T[9]=jiaoyan/1000+48;
   \   0000A2   90....       MOV     DPTR,#jiaoyan
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?L_MOV_X
   \   0000AA   90....       MOV     DPTR,#__Constant_3e8
   \   0000AD   78..         MOV     R0,#?V0 + 4
   \   0000AF   12....       LCALL   ?L_MOV_X
   \   0000B2   78..         MOV     R0,#?V0 + 0
   \   0000B4   79..         MOV     R1,#?V0 + 4
   \   0000B6   12....       LCALL   ?UL_DIV_MOD
   \   0000B9   12....       LCALL   ?Subroutine9 & 0xFFFF
    623            T[10]=(jiaoyan/100)%10+48;
    624            T[11]=(jiaoyan/10)%10+48;
    625            T[12]=jiaoyan%10+48;
    626            HalUARTWrite(0,"\n",1);
    627           // SendKongkouInfor(T);
    628            afAddrType_t dstAddr;
    629          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type
    630          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    631          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    632          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    633                                 SAMPLEAPP_MY_CLUSTERID,
    634                                 13,  // ÏûÏ¢³¤¶È
    635                                 T, // ÏûÏ¢ÄÚÈÝ
    636                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    637                                 AF_DISCV_ROUTE,
    638                                 AF_DEFAULT_RADIUS );	
    639            HalUARTWrite(0,T,13); 
    640            	}
   \                     ??CrossCallReturnLabel_62:
   \   0000BC   12....       LCALL   ?L_MOV_X
   \   0000BF   90....       MOV     DPTR,#__Constant_64
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   12....       LCALL   ?L_MOV_X
   \   0000C7   78..         MOV     R0,#?V0 + 4
   \   0000C9   79..         MOV     R1,#?V0 + 0
   \   0000CB   12....       LCALL   ?UL_DIV_MOD
   \   0000CE   90....       MOV     DPTR,#__Constant_a
   \   0000D1   78..         MOV     R0,#?V0 + 0
   \   0000D3   12....       LCALL   ?L_MOV_X
   \   0000D6   78..         MOV     R0,#?V0 + 4
   \   0000D8   79..         MOV     R1,#?V0 + 0
   \   0000DA   12....       LCALL   ?UL_DIV_MOD
   \   0000DD   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000E0   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000E3   12....       LCALL   ?L_MOV_X
   \   0000E6   90....       MOV     DPTR,#__Constant_a
   \   0000E9   78..         MOV     R0,#?V0 + 0
   \   0000EB   12....       LCALL   ?L_MOV_X
   \   0000EE   78..         MOV     R0,#?V0 + 4
   \   0000F0   79..         MOV     R1,#?V0 + 0
   \   0000F2   12....       LCALL   ?UL_DIV_MOD
   \   0000F5   90....       MOV     DPTR,#__Constant_a
   \   0000F8   78..         MOV     R0,#?V0 + 0
   \   0000FA   12....       LCALL   ?L_MOV_X
   \   0000FD   78..         MOV     R0,#?V0 + 4
   \   0000FF   79..         MOV     R1,#?V0 + 0
   \   000101   12....       LCALL   ?UL_DIV_MOD
   \   000104   E5..         MOV     A,?V0 + 0
   \   000106   02....       LJMP    ??SampleApp_HandleKeys_7 & 0xFFFF
    641            else
    642            	{
    643          	  s=0;
   \                     ??SampleApp_HandleKeys_1:
   \   000109   E4           CLR     A
   \   00010A   12....       LCALL   ?Subroutine6 & 0xFFFF
    644          		T[0]='*';
    645          		T[1]='1';
    646          		T[2]='3';
    647          		T[3]='4';
    648          		T[4]='0';
    649          		T[5]='0';
    650          		T[6]='0';
    651          		T[7]='0';
    652          		T[8]='3';
   \                     ??CrossCallReturnLabel_11:
   \   00010D   7433         MOV     A,#0x33
   \   00010F   12....       LCALL   ?Subroutine13 & 0xFFFF
    653          		unsigned char  len = 16;
    654          		unsigned long  temp = 0; 
   \                     ??CrossCallReturnLabel_22:
   \   000112   12....       LCALL   ?L_MOV_X
    655          		unsigned char  i;
    656          		unsigned char  *ptr=T;
   \   000115   7C..         MOV     R4,#T & 0xff
   \   000117   7D..         MOV     R5,#(T >> 8) & 0xff
   \   000119   8049         SJMP    ??SampleApp_HandleKeys_8
    657          	  
    658          		  while(len--) 
    659          		  {
    660          		  for(i=0x80;i!=0;i=i>>1)
   \                     ??SampleApp_HandleKeys_9:
   \   00011B   7A80         MOV     R2,#-0x80
    661          		  {
    662          			  temp = temp * 2;
   \                     ??SampleApp_HandleKeys_10:
   \   00011D   7401         MOV     A,#0x1
   \   00011F   78..         MOV     R0,#?V0 + 0
   \   000121   12....       LCALL   ?L_SHL
    663          			  if((temp & 0x10000) != 0)
   \   000124   85....       MOV     ?V0 + 4,?V0 + 0
   \   000127   85....       MOV     ?V0 + 5,?V0 + 1
   \   00012A   85....       MOV     ?V0 + 6,?V0 + 2
   \   00012D   85....       MOV     ?V0 + 7,?V0 + 3
   \   000130   90....       MOV     DPTR,#__Constant_10000
   \   000133   78..         MOV     R0,#?V0 + 4
   \   000135   12....       LCALL   ?L_AND_X
   \   000138   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00013B   6008         JZ      ??SampleApp_HandleKeys_11
    664          			  temp = temp ^ 0x11021;
   \   00013D   90....       MOV     DPTR,#__Constant_11021
   \   000140   78..         MOV     R0,#?V0 + 0
   \   000142   12....       LCALL   ?L_XOR_X
    665          			  if((*ptr & i) != 0)
   \                     ??SampleApp_HandleKeys_11:
   \   000145   8C82         MOV     DPL,R4
   \   000147   8D83         MOV     DPH,R5
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   5A           ANL     A,R2
   \   00014B   6008         JZ      ??SampleApp_HandleKeys_12
    666          					temp = temp ^ (0x10000 ^ 0x11021);
   \   00014D   90....       MOV     DPTR,#__Constant_1021
   \   000150   78..         MOV     R0,#?V0 + 0
   \   000152   12....       LCALL   ?L_XOR_X
    667          			   }
   \                     ??SampleApp_HandleKeys_12:
   \   000155   EA           MOV     A,R2
   \   000156   C3           CLR     C
   \   000157   13           RRC     A
   \   000158   FA           MOV     R2,A
   \   000159   70C2         JNZ     ??SampleApp_HandleKeys_10
    668          		  
    669          			   ptr++;
   \   00015B   8C82         MOV     DPL,R4
   \   00015D   8D83         MOV     DPH,R5
   \   00015F   A3           INC     DPTR
   \   000160   AC82         MOV     R4,DPL
   \   000162   AD83         MOV     R5,DPH
    670          			  }
   \                     ??SampleApp_HandleKeys_8:
   \   000164   E9           MOV     A,R1
   \   000165   FF           MOV     R7,A
   \   000166   74FF         MOV     A,#-0x1
   \   000168   2F           ADD     A,R7
   \   000169   19           DEC     R1
   \   00016A   04           INC     A
   \   00016B   70AE         JNZ     ??SampleApp_HandleKeys_9
    671          		jiaoyan= temp%10;
   \   00016D   85....       MOV     ?V0 + 4,?V0 + 0
   \   000170   85....       MOV     ?V0 + 5,?V0 + 1
   \   000173   85....       MOV     ?V0 + 6,?V0 + 2
   \   000176   85....       MOV     ?V0 + 7,?V0 + 3
   \   000179   90....       MOV     DPTR,#__Constant_a
   \   00017C   78..         MOV     R0,#?V0 + 0
   \   00017E   12....       LCALL   ?L_MOV_X
   \   000181   78..         MOV     R0,#?V0 + 4
   \   000183   79..         MOV     R1,#?V0 + 0
   \   000185   12....       LCALL   ?UL_DIV_MOD
   \   000188   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00018B   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    672          		T[9]=jiaoyan/1000+48;
   \                     ??CrossCallReturnLabel_66:
   \   00018E   12....       LCALL   ?L_MOV_X
   \   000191   90....       MOV     DPTR,#__Constant_3e8
   \   000194   78..         MOV     R0,#?V0 + 0
   \   000196   12....       LCALL   ?L_MOV_X
   \   000199   78..         MOV     R0,#?V0 + 4
   \   00019B   79..         MOV     R1,#?V0 + 0
   \   00019D   12....       LCALL   ?UL_DIV_MOD
   \   0001A0   E5..         MOV     A,?V0 + 4
   \   0001A2   12....       LCALL   ?Subroutine11 & 0xFFFF
    673          		T[10]=(jiaoyan/100)%10+48;
   \                     ??CrossCallReturnLabel_58:
   \   0001A5   12....       LCALL   ?L_MOV_X
   \   0001A8   90....       MOV     DPTR,#__Constant_64
   \   0001AB   78..         MOV     R0,#?V0 + 4
   \   0001AD   12....       LCALL   ?L_MOV_X
   \   0001B0   78..         MOV     R0,#?V0 + 0
   \   0001B2   79..         MOV     R1,#?V0 + 4
   \   0001B4   12....       LCALL   ?UL_DIV_MOD
   \   0001B7   90....       MOV     DPTR,#__Constant_a
   \   0001BA   78..         MOV     R0,#?V0 + 4
   \   0001BC   12....       LCALL   ?L_MOV_X
   \   0001BF   78..         MOV     R0,#?V0 + 0
   \   0001C1   79..         MOV     R1,#?V0 + 4
   \   0001C3   12....       LCALL   ?UL_DIV_MOD
   \   0001C6   E5..         MOV     A,?V0 + 4
   \   0001C8   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0001CB   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    674          		T[11]=(jiaoyan/10)%10+48;
   \                     ??CrossCallReturnLabel_60:
   \   0001CE   12....       LCALL   ?L_MOV_X
   \   0001D1   90....       MOV     DPTR,#__Constant_a
   \   0001D4   78..         MOV     R0,#?V0 + 4
   \   0001D6   12....       LCALL   ?L_MOV_X
   \   0001D9   78..         MOV     R0,#?V0 + 0
   \   0001DB   79..         MOV     R1,#?V0 + 4
   \   0001DD   12....       LCALL   ?UL_DIV_MOD
   \   0001E0   90....       MOV     DPTR,#__Constant_a
   \   0001E3   78..         MOV     R0,#?V0 + 4
   \   0001E5   12....       LCALL   ?L_MOV_X
   \   0001E8   78..         MOV     R0,#?V0 + 0
   \   0001EA   79..         MOV     R1,#?V0 + 4
   \   0001EC   12....       LCALL   ?UL_DIV_MOD
   \   0001EF   E5..         MOV     A,?V0 + 4
   \                     ??SampleApp_HandleKeys_7:
   \   0001F1   2430         ADD     A,#0x30
   \   0001F3   90....       MOV     DPTR,#T + 11
   \   0001F6   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    675          		T[12]=jiaoyan%10+48;
   \                     ??CrossCallReturnLabel_67:
   \   0001F9   12....       LCALL   ?L_MOV_X
   \   0001FC   90....       MOV     DPTR,#__Constant_a
   \   0001FF   78..         MOV     R0,#?V0 + 0
   \   000201   12....       LCALL   ?L_MOV_X
   \   000204   78..         MOV     R0,#?V0 + 4
   \   000206   79..         MOV     R1,#?V0 + 0
   \   000208   12....       LCALL   ?UL_DIV_MOD
   \   00020B   12....       LCALL   ?Subroutine7 & 0xFFFF
    676          		HalUARTWrite(0,"\n",1);
    677          		//SendKongkouInfor(T);
    678          		afAddrType_t dstAddr;
    679          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??CrossCallReturnLabel_14:
   \   00020E   12....       LCALL   ?XSTACK_DISP0_8
   \   000211   7402         MOV     A,#0x2
   \   000213   F0           MOVX    @DPTR,A
    680          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000214   7409         MOV     A,#0x9
   \   000216   12....       LCALL   ?XSTACK_DISP0_8
   \   000219   12....       LCALL   ?Subroutine5 & 0xFFFF
    681          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    682          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    683                                 SAMPLEAPP_MY_CLUSTERID,
    684                                 13,  // ÏûÏ¢³¤¶È
    685                                 T, // ÏûÏ¢ÄÚÈÝ
    686                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    687                                 AF_DISCV_ROUTE,
    688                                 AF_DEFAULT_RADIUS );	
   \                     ??CrossCallReturnLabel_8:
   \   00021C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00021F   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000222   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000225   78..         MOV     R0,#?V0 + 0
   \   000227   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022A   75....       MOV     ?V0 + 0,#T & 0xff
   \   00022D   75....       MOV     ?V0 + 1,#(T >> 8) & 0xff
   \   000230   78..         MOV     R0,#?V0 + 0
   \   000232   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000235   75..0D       MOV     ?V0 + 0,#0xd
   \   000238   75..00       MOV     ?V0 + 1,#0x0
   \   00023B   78..         MOV     R0,#?V0 + 0
   \   00023D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000240   75..03       MOV     ?V0 + 0,#0x3
   \   000243   78..         MOV     R0,#?V0 + 0
   \   000245   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000248   7920         MOV     R1,#0x20
   \   00024A   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00024C   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00024E   7409         MOV     A,#0x9
   \   000250   12....       LCALL   ?XSTACK_DISP0_8
   \   000253   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000256   12....       LCALL   ?DEALLOC_XSTACK8
    689          		HalUARTWrite(0,T,13); 
   \   000259                ; Setup parameters for call to function HalUARTWrite
   \   000259   7C0D         MOV     R4,#0xd
   \   00025B   7D00         MOV     R5,#0x0
   \   00025D   7A..         MOV     R2,#T & 0xff
   \   00025F   7B..         MOV     R3,#(T >> 8) & 0xff
   \   000261   7900         MOV     R1,#0x0
   \   000263   12....       LCALL   ??HalUARTWrite?relay
    690          
    691            }
    692              /* This key sends the Flash Command is sent to Group 1.
    693               * This device will not receive the Flash Command from this
    694               * device (even if it belongs to group 1).
    695               */
    696              //SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
    697              /*uint8* msg="1";
    698          	afAddrType_t dstAddr;
    699          	dstAddr.addrMode=Addr16Bit;//µØÖ·Ä£Ê½Îª16Î»¶ÌµØÖ·
    700          	dstAddr.endPoint=SAMPLEAPP_ENDPOINT;
    701          	dstAddr.addr.shortAddr=0xFFFF;//0xFFFF±íÊ¾¹ã²¥
    702          	AF_DataRequest( &dstAddr, &SampleApp_epDesc,
    703                                 SAMPLEAPP_MY_CLUSTERID,
    704                                 sizeof(msg),//ÏûÏ¢³¤¶È
    705                                 msg,//ÏûÏ¢ÄÚÈÝ,
    706                                 &SampleApp_TransID,//ÏûÏ¢±àºÅ
    707                                 AF_DISCV_ROUTE,
    708                                 AF_DEFAULT_RADIUS );	*/	
    709             // HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
    710            	}
    711            }
    712          
    713            if ( keys & HAL_KEY_SW_6 )
   \                     ??SampleApp_HandleKeys_0:
   \   000266   E5..         MOV     A,?V0 + 8
   \   000268   A2E5         MOV     C,0xE0 /* A   */.5
   \   00026A   504D         JNC     ??SampleApp_HandleKeys_13
    714            {
    715              /* The Flashr Command is sent to Group 1.
    716               * This key toggles this device in and out of group 1.
    717               * If this device doesn't belong to group 1, this application
    718               * will not receive the Flash command sent to group 1.
    719               */
    720              //HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
    721              uint8* msg="0";
    722          	afAddrType_t dstAddr;
    723          	dstAddr.addrMode=Addr16Bit;//µØÖ·Ä£Ê½Îª16Î»¶ÌµØÖ·
                 	                ^
Warning[Pe188]: enumerated type mixed with another type
   \   00026C   7408         MOV     A,#0x8
   \   00026E   12....       LCALL   ?XSTACK_DISP0_8
   \   000271   7402         MOV     A,#0x2
   \   000273   F0           MOVX    @DPTR,A
    724          	dstAddr.endPoint=SAMPLEAPP_ENDPOINT;
   \   000274   7409         MOV     A,#0x9
   \   000276   12....       LCALL   ?XSTACK_DISP0_8
   \   000279   12....       LCALL   ?Subroutine5 & 0xFFFF
    725          	dstAddr.addr.shortAddr=0xFFFF;//0xFFFF±íÊ¾¹ã²¥
    726          	AF_DataRequest( &dstAddr, &SampleApp_epDesc,
    727                                 SAMPLEAPP_MY_CLUSTERID,
    728                                 sizeof(msg),//ÏûÏ¢³¤¶È
    729                                 msg,//ÏûÏ¢ÄÚÈÝ,
    730                                 &SampleApp_TransID,//ÏûÏ¢±àºÅ
    731                                 AF_DISCV_ROUTE,
    732                                 AF_DEFAULT_RADIUS );		
    733            }
   \                     ??CrossCallReturnLabel_9:
   \   00027C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00027F   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000282   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000285   78..         MOV     R0,#?V0 + 0
   \   000287   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00028A   75....       MOV     ?V0 + 0,#`?<Constant "0">` & 0xff
   \   00028D   75....       MOV     ?V0 + 1,#(`?<Constant "0">` >> 8) & 0xff
   \   000290   78..         MOV     R0,#?V0 + 0
   \   000292   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000295   75..02       MOV     ?V0 + 0,#0x2
   \   000298   75..00       MOV     ?V0 + 1,#0x0
   \   00029B   78..         MOV     R0,#?V0 + 0
   \   00029D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A0   75..03       MOV     ?V0 + 0,#0x3
   \   0002A3   78..         MOV     R0,#?V0 + 0
   \   0002A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A8   7920         MOV     R1,#0x20
   \   0002AA   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0002AC   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0002AE   7409         MOV     A,#0x9
   \   0002B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B3   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0002B6   12....       LCALL   ?DEALLOC_XSTACK8
    734          }
   \                     ??SampleApp_HandleKeys_13:
   \   0002B9   740C         MOV     A,#0xc
   \   0002BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002BE   7F09         MOV     R7,#0x9
   \   0002C0   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   7910         MOV     R1,#0x10
   \   000003   90....       MOV     DPTR,#__Constant_0
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000004   04           INC     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   7430         MOV     A,#0x30
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   22           RET
    735          
    736          /*********************************************************************
    737           * LOCAL FUNCTIONS
    738           */
    739          
    740          /*********************************************************************
    741           * @fn      SampleApp_MessageMSGCB
    742           *
    743           * @brief   Data message processor callback.  This function processes
    744           *          any incoming data - probably from other devices.  So, based
    745           *          on cluster ID, perform the intended action.
    746           *
    747           * @param   none
    748           *
    749           * @return  none
    750           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    751          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    752          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    753            uint16 flashTime;
    754          
    755            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0200         DW        2
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    756            {
    757              case SAMPLEAPP_PERIODIC_CLUSTERID:
    758                break;
    759          
    760              case SAMPLEAPP_FLASH_CLUSTERID:
    761                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    762                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   000026   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000029   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FA           MOV     R2,A
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   2400         ADD     A,#0x0
   \   00003A   F5..         MOV     ?V0 + 0,A
   \   00003C   E4           CLR     A
   \   00003D   39           ADDC    A,R1
   \   00003E   F5..         MOV     ?V0 + 1,A
   \   000040   7402         MOV     A,#0x2
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?US_SHR
   \   000047   AC..         MOV     R4,?V0 + 0
   \   000049   AD..         MOV     R5,?V0 + 1
   \   00004B   7B32         MOV     R3,#0x32
   \   00004D   7A04         MOV     R2,#0x4
   \   00004F   7908         MOV     R1,#0x8
   \   000051   12....       LCALL   ??HalLedBlink?relay
    763                break;
   \   000054   805B         SJMP    ??SampleApp_MessageMSGCB_0
    764          	
    765              case SAMPLEAPP_MY_CLUSTERID:   // ÎÒÃÇ×Ô¶¨ÒåµÄÏûÏ¢
    766          		/*HalUARTWrite(0,pkt->cmd.Data,pkt->cmd.DataLength);	// ¿Õ¿ÚÏûÏ¢×ª·¢
    767                  if(pkt->cmd.Data[0]=='1')
    768          		HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
    769          		if(pkt->cmd.Data[0]=='0')
    770          		HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);*/
    771                  HalUARTWrite(0,pkt->cmd.Data,pkt->cmd.DataLength);	// ¿Õ¿ÚÏûÏ¢×ª·¢
   \                     ??SampleApp_MessageMSGCB_2:
   \   000056                ; Setup parameters for call to function HalUARTWrite
   \   000056   EE           MOV     A,R6
   \   000057   2420         ADD     A,#0x20
   \   000059   F582         MOV     DPL,A
   \   00005B   EF           MOV     A,R7
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   F583         MOV     DPH,A
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FC           MOV     R4,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   FD           MOV     R5,A
   \   000065   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FA           MOV     R2,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FB           MOV     R3,A
   \   00006D   7900         MOV     R1,#0x0
   \   00006F   12....       LCALL   ??HalUARTWrite?relay
    772          		uint8* q=(uint8*)pkt;
    773          
    774          		uint8* ch=q;
    775          		JieQu(ch,3,1);
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   12....       LCALL   ??Subroutine22_0 & 0xFFFF
    776          		if(subch=='3')JieQu(ch,6,1);
   \                     ??CrossCallReturnLabel_48:
   \   000079   6433         XRL     A,#0x33
   \   00007B   700A         JNZ     ??CrossCallReturnLabel_49
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   12....       LCALL   ??Subroutine22_0 & 0xFFFF
    777          		if(subch=='1')f=1;
   \                     ??CrossCallReturnLabel_49:
   \   000087   E0           MOVX    A,@DPTR
   \   000088   6431         XRL     A,#0x31
   \   00008A   90....       MOV     DPTR,#f
   \   00008D   7004         JNZ     ??SampleApp_MessageMSGCB_3
   \   00008F   7401         MOV     A,#0x1
   \   000091   8001         SJMP    ??SampleApp_MessageMSGCB_4
    778          		else f=0;
   \                     ??SampleApp_MessageMSGCB_3:
   \   000093   E4           CLR     A
   \                     ??SampleApp_MessageMSGCB_4:
   \   000094   F0           MOVX    @DPTR,A
    779          		JieQu(ch,3,1);
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   12....       LCALL   ??Subroutine22_0 & 0xFFFF
    780          		if(subch=='4')s=0;
   \                     ??CrossCallReturnLabel_50:
   \   00009C   6434         XRL     A,#0x34
   \   00009E   7006         JNZ     ??SampleApp_MessageMSGCB_5
   \   0000A0   90....       MOV     DPTR,#`s`
   \   0000A3   E4           CLR     A
   \   0000A4   800A         SJMP    ??SampleApp_MessageMSGCB_6
    781          		else if (subch=='2'){
   \                     ??SampleApp_MessageMSGCB_5:
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   6432         XRL     A,#0x32
   \   0000A9   7006         JNZ     ??SampleApp_MessageMSGCB_0
    782                  w[0]=1;
   \   0000AB   90....       MOV     DPTR,#w
   \   0000AE   7401         MOV     A,#0x1
   \                     ??SampleApp_MessageMSGCB_6:
   \   0000B0   F0           MOVX    @DPTR,A
    783          		}
    784          		break;
    785            }
    786          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000B1   02....       LJMP    ??Subroutine27_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
    787          
    788          /*********************************************************************
    789           * @fn      SampleApp_SendPeriodicMessage
    790           *
    791           * @brief   Send the periodic message.
    792           *
    793           * @param   none
    794           *
    795           * @return  none
    796           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    797          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    798          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    799            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    800                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    801                                 1,
    802                                 (uint8*)&SampleAppPeriodicCounter,
    803                                 &SampleApp_TransID,
    804                                 AF_DISCV_ROUTE,
    805                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000040   80..         SJMP    ?Subroutine0
    806            {
    807            }
    808            else
    809            {
    810              // Error occurred in request to send.
    811            }
    812          }
    813          
    814          /*********************************************************************
    815           * @fn      SampleApp_SendFlashMessage
    816           *
    817           * @brief   Send the flash message to group 1.
    818           *
    819           * @param   flashTime - in milliseconds
    820           *
    821           * @return  none
    822           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    823          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    824          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    825            uint8 buffer[3];
    826            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    827            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    828            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    829          
    830            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    831                                 SAMPLEAPP_FLASH_CLUSTERID,
    832                                 3,
    833                                 buffer,
    834                                 &SampleApp_TransID,
    835                                 AF_DISCV_ROUTE,
    836                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    837            {
    838            }
    839            else
    840            {
    841              // Error occurred in request to send.
    842            }
    843          }
   \   00006F   7403         MOV     A,#0x3
   \   000071                REQUIRE ?Subroutine0
   \   000071                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine22_0
   \   000006                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine23_0
   \   000003                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??JieQu?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    JieQu

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendKongkouInfor?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendKongkouInfor

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0">`:
   \   000000   3000         DB "0"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_11021:
   \   000000   21100100     DD 69665

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1021:
   \   000000   21100000     DD 4129

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100
    844          
    845          /*********************************************************************
    846          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     JieQu                              2      0      2
     SampleApp_HandleKeys               0      0     71
       -> HalUARTWrite                  0      0     58
       -> AF_DataRequest                0      0     76
       -> HalUARTWrite                  0      0     58
       -> HalUARTWrite                  0      0     58
       -> AF_DataRequest                0      0     76
       -> HalUARTWrite                  0      0     58
       -> AF_DataRequest                0      0     76
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> osal_set_event                0      0     22
       -> osal_set_event                0      0     22
       -> osal_set_event                0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     43
       -> HalLedBlink                   0      0     20
       -> HalUARTWrite                  0      0     20
     SampleApp_ProcessEvent             0      0     42
       -> osal_msg_receive              0      0     66
       -> SampleApp_HandleKeys          0      0     66
       -> SampleApp_MessageMSGCB        0      0     66
       -> osal_start_timerEx            0      0     66
       -> AF_DataRequest                0      0     84
       -> osal_msg_deallocate           0      0     66
       -> osal_msg_receive              0      0     66
       -> SampleApp_SendPeriodicMessage
                                        0      0     66
       -> osal_rand                     0      0     66
       -> osal_start_timerEx            0      0     66
       -> HalUARTWrite                  0      0     66
       -> AF_DataRequest                0      0     84
       -> HalUARTWrite                  0      0     66
       -> HalUARTWrite                  0      0     66
       -> AF_DataRequest                0      0     84
       -> HalUARTWrite                  0      0     66
       -> osal_start_timerEx            0      0     66
       -> HalLedSet                     0      0     66
       -> HalLedSet                     0      0     66
       -> HalLedSet                     0      0     66
       -> HalLedSet                     0      0     66
       -> osal_start_timerEx            0      0     66
       -> HalLedSet                     0      0     66
       -> HalLedSet                     0      0     66
       -> osal_start_timerEx            0      0     66
     SampleApp_SendFlashMessage         1      0     22
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     52
       -> AF_DataRequest                0      0     38
     SendKongkouInfor                   0      0     31
       -> AF_DataRequest                0      0     62


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P2                                    1
     P2SEL                                    1
     P2DIR                                    1
     SampleApp_ClusterList                    6
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     subch                                    1
     jiaoyan                                  4
     T                                       13
     f                                        1
     s                                        1
     e                                        1
     r                                        1
     z                                        1
     w                                        1
     JieQu                                   23
     ??Subroutine23_0                         6
     SendKongkouInfor                        90
     ?Subroutine14                            4
     ??Subroutine20_0                         6
     ?Subroutine5                             9
     ?Subroutine18                           15
     ?Subroutine0                             3
     ??Subroutine27_0                         5
     SampleApp_Init                         191
     ?Subroutine4                            11
     SampleApp_ProcessEvent                1216
     ?Subroutine12                            9
     ?Subroutine8                            18
     ?Subroutine2                             2
     ??Subroutine21_0                        11
     ?Subroutine16                            2
     ??Subroutine24_0                         6
     ?Subroutine15                            9
     ?Subroutine11                            5
     ??Subroutine25_0                         7
     ?Subroutine10                           18
     ?Subroutine9                             7
     ??Subroutine26_0                         7
     ?Subroutine7                            24
     ?Subroutine19                           16
     ?Subroutine3                            10
     SampleApp_HandleKeys                   707
     ?Subroutine13                            9
     ?Subroutine6                            18
     SampleApp_MessageMSGCB                 180
     ?Subroutine17                           11
     SampleApp_SendPeriodicMessage           66
     SampleApp_SendFlashMessage             113
     ?Subroutine1                             6
     ??Subroutine22_0                         3
     ??JieQu?relay                            6
     ??SendKongkouInfor?relay                 6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "\n">                         2
     ?<Constant "0">                          2
     __Constant_0                             4
     __Constant_10000                         4
     __Constant_11021                         4
     __Constant_1021                          4
     __Constant_a                             4
     __Constant_3e8                           4
     __Constant_64                            4

 
 2 843 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
    68 bytes in segment XDATA_ROM_C
    77 bytes in segment XDATA_Z
 
 2 891 bytes of CODE  memory
    40 bytes of CONST memory (+ 28 bytes shared)
     0 bytes of DATA  memory (+  3 bytes shared)
    77 bytes of XDATA memory

Errors: none
Warnings: 9
